//HomeController.java
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HomeController {
	
	@RequestMapping("/")
	public String home() {
		return "home";
	}
}

---------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>day01</title>
</head>
<body>

<h1>컨트롤러 예제</h1>
<hr>

<ul>
	<li><a href="${pageContext.request.contextPath }/ex01">ex01 - 링크를 클릭하면 연결되는 함수</a></li>
	<li><a href="${cpath }/ex02">ex02 - 컨트롤러에 주로 사용하는 어노테이션</a></li>
	<li><a href="${cpath }/ex03">ex03 - 커맨드 객체</a></li>
	<li><a href="${cpath }/ex04">ex04 - Model And View</a></li>
	<li><a href="${cpath }/ex05">ex05 - Path Variable</a></li>
	<li><a href="${cpath }/calc">calc - 두 수의 사칙연산 계산기</a></li>
</ul>

</body>
</html>
---------------
//Ex01Controller.java
package com.itbank.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

/*
	스프링에서 컨트롤러의 개수는 상관이 없다
	작성자 기준으로 관련있는 주소끼리 모아서 하나의 컨트롤러로 제어하면 된다
	여러개의 컨트롤러가 있어도 서블릿의 관심사는 어떤 RequestMapping이 있는가이다
*/

@Controller
public class Ex01Controller {

	@RequestMapping(value="/ex01", method=RequestMethod.GET)
	public String ex01() {
		return "ex01";
	}
	
	// 컨트롤러는 DispatcherServlet에게 요청을 넘겨받으므로
	// DispatcherServlet이 넘겨줄 수 있는 값을 함수의 매개변수에 작성하면 된다
	@RequestMapping(value="/ex01", method=RequestMethod.POST)
	public String ex01(HttpServletRequest request) throws IOException {
		
		request.setCharacterEncoding("UTF-8");
		
		String name = request.getParameter("name");
		int age = Integer.parseInt(request.getParameter("age"));
		
		String adult = age >= 20 ? "성인" : "미성년자";
		
		request.setAttribute("name", name);
		request.setAttribute("age", age);
		request.setAttribute("adult", adult);
		
		return "ex01Result";
	}
}
-----------------
//ex01.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex01 (GET)</h1>
<hr>

<form method="POST">
	<input type="text" name="name" placeholder="이름을 입력하세요" required autofocus>
	<input type="number" name="age" placeholder="나이를 입력하세요" required>
	<input type="submit" value="제출">
</form>

</body>
</html>
-------------------
//ex01Result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex01 (POST)</h1>
<hr>

<h3>${name }님은 ${age }살이고, ${adult }입니다</h3>

</body>
</html>

===================================================================================
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>day01</title>
</head>
<body>

<h1>컨트롤러 예제</h1>
<hr>

<ul>
	<li><a href="${pageContext.request.contextPath }/ex01">ex01 - 링크를 클릭하면 연결되는 함수</a></li>
	<li><a href="${cpath }/ex02">ex02 - 컨트롤러에 주로 사용하는 어노테이션</a></li>
	<li><a href="${cpath }/ex03">ex03 - 커맨드 객체</a></li>
	<li><a href="${cpath }/ex04">ex04 - Model And View</a></li>
	<li><a href="${cpath }/ex05">ex05 - Path Variable</a></li>
	<li><a href="${cpath }/calc">calc - 두 수의 사칙연산 계산기</a></li>
</ul>

</body>
</html>
--------------
//ex02.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex02 (GET)</h1>
<hr>

<form method="POST">
	<input type="text" name="name" placeholder="이름을 입력하세요" required autofocus>
	<input type="number" name="age" placeholder="나이를 입력하세요" required>
	<input type="submit" value="제출">
</form>

</body>
</html>
-----------------
//Ex02Controller.java
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class Ex02Controller {

	//home.jsp에서 클릭하면 여기로
	@GetMapping("/ex02")	// @RequestMapping(value="/ex02", method=RequestMethod.GET)
	public String ex02() {
		return "ex02";
	}
	
	@PostMapping("/ex02")	// @GetMapping, @PostMapping 등은 스프링 4.1.0 이상부터 가능
	public String ex02(@ModelAttribute("name") String name, @RequestParam int age, Model model) {
		
		String adult = age >= 20 ? "성인" : "미성년자";
		
//		model.addAttribute("name", name); 위에서 이미 name을 파라미터로 받음
		model.addAttribute("age", age);
		model.addAttribute("adult", adult);	// request.setAttribute("adult", adult);
		
		return "ex02Result";
	}
	// @RequestParam : request.getParameter(변수이름) => 생략가능
	// @ModelAttribute : 파라미터 그대로 model에 attribute로 등록하기, 파라미터 이름을 명시해주기
}
----------------
//ex02Result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex02 (POST)</h1>
<hr>

<h3>${name }님은 ${age }살이고, ${adult }입니다</h3>

</body>
</html>
===========================================================================
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>day01</title>
</head>
<body>

<h1>컨트롤러 예제</h1>
<hr>

<ul>
	<li><a href="${pageContext.request.contextPath }/ex01">ex01 - 링크를 클릭하면 연결되는 함수</a></li>
	<li><a href="${cpath }/ex02">ex02 - 컨트롤러에 주로 사용하는 어노테이션</a></li>
	<li><a href="${cpath }/ex03">ex03 - 커맨드 객체</a></li>
	<li><a href="${cpath }/ex04">ex04 - Model And View</a></li>
	<li><a href="${cpath }/ex05">ex05 - Path Variable</a></li>
	<li><a href="${cpath }/calc">calc - 두 수의 사칙연산 계산기</a></li>
</ul>

</body>
</html>
-----------------
//ex03.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex03 (GET)</h1>
<hr>

<form method="POST">
	<input type="text" name="name" placeholder="이름을 입력하세요" required autofocus>
	<input type="number" name="age" placeholder="나이를 입력하세요" required>
	<input type="submit" value="제출">
</form>

</body>
</html>
---------------------
//Ex03Controller.java
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

import com.itbank.member.MemberDTO;

@Controller
public class Ex03Controller {

	@GetMapping("/ex03")
	public void ex03() {}
	// 컨트롤러 메서드의 반환형이 void이면 @RequestMapping의 value가 viewName이 된다
	// => 요청 주소 그대로 jsp를 찾아간다
	
//	@PostMapping("/ex03")
//	public String ex03(MemberDTO dto, Model model) {
//		model.addAttribute("dto", dto);
//		return "ex03Result";
//	}
	
	@PostMapping("/ex03")
	public String ex03(@ModelAttribute("dto") MemberDTO dto) { //파라미터 dto롤 받아서 dto로 저장
		return "ex03Result";
	}
	// ModelAttribute에서 지정하는 이름은 view에서 EL태그로 참조할 이름이다 -> dto. 으로 참조가능
}
-------------
package com.itbank.member;

// 스프링 빈은 싱글톤인데, DTO는 서로 다른 값을 가지는 여러 객체가 존재해야 하므로, 스프링 빈으로 등록하지 않는다

public class MemberDTO {
	
	private String name;
	private int age;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
}
----------------------
//ex03Result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex03 (POST)</h1>
<hr>

<h3>${dto.name }님은 ${dto.age }살이고, ${dto.age >= 20 ? '성인' : '미성년자' }입니다</h3>

</body>
</html>
====================================================================================
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>day01</title>
</head>
<body>

<h1>컨트롤러 예제</h1>
<hr>

<ul>
	<li><a href="${pageContext.request.contextPath }/ex01">ex01 - 링크를 클릭하면 연결되는 함수</a></li>
	<li><a href="${cpath }/ex02">ex02 - 컨트롤러에 주로 사용하는 어노테이션</a></li>
	<li><a href="${cpath }/ex03">ex03 - 커맨드 객체</a></li>
	<li><a href="${cpath }/ex04">ex04 - Model And View</a></li>
	<li><a href="${cpath }/ex05">ex05 - Path Variable</a></li>
	<li><a href="${cpath }/calc">calc - 두 수의 사칙연산 계산기</a></li>
</ul>

</body>
</html>
--------------------
//Ex04Controller
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.member.MemberDTO;

@Controller
public class Ex04Controller {

	@GetMapping("/ex04")
	public void abcd() {}
	// 함수이름은 반환형과 아무 상관이 없다
	
	// 함수의 반환형은 viewName이고, view에게 객체를 전달하기 위해서 Model을 사용한다
	// 둘다 DispatcherServlet을 통해서 전달하므로, 두 요소를 하나로 묶어서 반환하도록 ModelAndView를 사용할 수 있다
	// ModelAndView = Model model + String viewName
	@PostMapping("/ex04")
//	public ModelAndView ex04(ModelAndView mav, MemberDTO dto) {	// ModelAndView는 매개변수로 받을 수도 있다
	public ModelAndView ex04(MemberDTO dto) {
		
//		ModelAndView mav = new ModelAndView("ex04Result"); 	// 바로 생성자 매개변수로 viewName을 전달해도 된다
		
		ModelAndView mav = new ModelAndView();				// 기본 생성자로 객체를 생성하고
		mav.setViewName("ex04Result");						// viewName 을 setter로 지정할 수 있다
		
		mav.addObject("dto", dto);		// (공통부분)view에게 전달할 attribute를 addObject(name, object) 로 전달한다
		
		return mav;
	}
}
-----------------
//ex04.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex04 (GET)</h1>
<hr>

<form method="POST">
	<input type="text" name="name" placeholder="이름을 입력하세요" required autofocus>
	<input type="number" name="age" placeholder="나이를 입력하세요" required>
	<input type="submit" value="제출">
</form>

</body>
</html>
----------------
//ex04Result.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex04 (POST)</h1>
<hr>

<h3>${dto.name }님은 ${dto.age }살이고, ${dto.age >= 20 ? '성인' : '미성년자' }입니다</h3>

</body>
</html>

=====================================================================================
//ex05.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>ex05 - 경로 변수</h1>
<hr>

<h3>${msg }</h3>

<form> //Get으로 던짐
	<input name="name">
	<input type="submit" value="전송">
</form>
<script>
	const form = document.forms[0]
	const cpath = '${pageContext.request.contextPath}'	// 자바스크립트에서 cpath를 쓰기위해서 저장
	
	form.onsubmit = function(event) {
		event.preventDefault()					// form의 기본작동(submit) 을 막는다
		const name = form.children[0].value		// form 태그 안의 자식 요소 중 첫번째 요소의 value를 가져와서 name에 저장
		alert(name)								// 확인용으로 출력
		location.href = cpath + '/ex05/' + name	// 지정한 주소로 이동
	}
</script>


</body>
</html>
-----------
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class Ex05Controller {

	@GetMapping("/ex05")
	public void ex05() {}
	
	@GetMapping("/ex05/{name}")
	public ModelAndView ex05(@PathVariable String name) {
		ModelAndView mav = new ModelAndView("ex05");
		mav.addObject("msg", "안녕하세요, " + name);  //msg에 "안녕하세요, 짱구" 이렇게 들어간다.
		return mav;
	}
	// @PathVariable : 경로 변수, 요청 주소에 일부분을 파라미터로 취급하여 받을 수 있다
	// GET 요청시 파라미터의 표현방식인 쿼리스트링을 대체할 수 있다
}
=====================================================================================
//calc.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>두 수의 사칙연산 계산기</h1>
<hr>

<form method="POST">
	<input type="number" name="n1" value="${param.n1 }" 
		   style="width: 50px;" placeholder="n1" required autofocus>
	<select name="oper">
		<option ${param.oper == '+' ? 'selected' : ''}>+</option>	
		<option ${param.oper == '-' ? 'selected' : ''}>-</option>	
		<option ${param.oper == '*' ? 'selected' : ''}>*</option>	
		<option ${param.oper == '/' ? 'selected' : ''}>/</option>	
	</select>
	<input type="number" name="n2" value="${param.n2 }"
	       style="width: 50px;" placeholder="n2" required>
	<input type="submit" value="=">
</form>

<c:if test="${not empty dto }">
	<h3>${dto.n1 } ${dto.oper } ${dto.n2 } = ${dto.answer }</h3>
</c:if>
</body>
</html>
------------------
package com.itbank.calc;

public class CalcDTO {
	private int n1, n2, answer;	// 파라미터에 포함되지 않는 필드를 만들어도 상관없다
	private String oper;
	
	public int getN1() {
		return n1;
	}
	public void setN1(int n1) {
		this.n1 = n1;
	}
	public int getN2() {
		return n2;
	}
	public void setN2(int n2) {
		this.n2 = n2;
	}
	public int getAnswer() {
		return answer;
	}
	public void setAnswer(int answer) {
		this.answer = answer;
	}
	public String getOper() {
		return oper;
	}
	public void setOper(String oper) {
		this.oper = oper;
	}
	
	
}
----------
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.itbank.calc.CalcDTO;

@Controller
public class CalcController {

	@GetMapping("/calc")
	public String calc() {
		return "calc";	// calc.jsp
	}
	
	@PostMapping("/calc")
	public String calcProcess(CalcDTO dto, Model model) {
		int n1 = dto.getN1();
		int n2 = dto.getN2();
		
		switch(dto.getOper()) {
			case "+":	dto.setAnswer(n1 + n2);	break;
			case "-":	dto.setAnswer(n1 - n2);	break;
			case "*":	dto.setAnswer(n1 * n2);	break;
			case "/":	dto.setAnswer(n1 / n2);	break;
		}
		model.addAttribute("dto", dto);
		
		return "calc";	// calc.jsp
	}
}
================================================================================
//rootContext
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- DispatcherServlet이 아니더라도 모든 웹 컴포넌트가 공유할 수 있는 객체를 스프링 빈으로 선언 -->
	
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="user" value="c##itbank" />
		<property name="password" value="it" />
		<property name="maxPoolSize" value="100" />
		<property name="maxIdleTime" value="600" />
		<property name="idleConnectionTestPeriod" value="300" />
	</bean>
	
	<!-- JSP에서는 dataSource를 우리가 직접 받아서 사용했지만, 여기서는 jdbcTemplate에게 넘겨준다 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<context:component-scan base-package="com.itbank.model" />
	<context:component-scan base-package="com.itbank.service" />
	
	
		
</beans>
------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>jdbcTemplate 테스트</h1>
<hr>
<h3>${msg }</h3>

<ul>
	<li><a href="${cpath }/join">회원가입 예제</a></li>
	<li><a href="${cpath }/list">회원목록 확인</a></li>
</ul>

</body>
</html>
-----------------
//HomeController
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.itbank.service.DBTestService;

@Controller
public class HomeController {
	
	@Autowired	// 스프링 빈 중에서 타입이 일치하는 객체를 자동으로 맵핑한다 (의존 주입)
	private DBTestService ds;// = new DBTestService();

	@RequestMapping("/")	// 요청 메서드에 상관없이 주소만으로 판별하려면 RequestMapping으로 처리하면 된다
	public String home(Model model) {

		String msg = ds.getTest();
		model.addAttribute("msg", msg);
		return "home";
	}
}
--------------------
//DBTestService
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.DBTestDAO;

@Service	// 스프링 빈으로 등록하는 어노테이션
public class DBTestService {
	
	@Autowired private DBTestDAO dao;
	
	public String getTest() {

		return dao.selectVersion();
	}

}
-------------------
//DBTestDAO
package com.itbank.model;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository
public class DBTestDAO {
	
	@Autowired private JdbcTemplate jt;

	public String selectVersion() {
		String sql = "select banner from v$version";
//		RowMapper<String> rowMapper = (ResultSet rs, int rowNum) -> {
//			return rs.getString("banner");
//		};	// 람다식을 활용한 함수형 인터페이스 객체 생성
		
		RowMapper<String> rowMapper = new RowMapper<String>() {
			@Override
			public String mapRow(ResultSet rs, int rowNum) throws SQLException {
				return rs.getString("banner"); //위의 sql결과를 rs로 가져온다
			}
		};	// 추상 클래스를 상속받는 익명클래스 객체 생성
		String result = jt.queryForObject(sql, rowMapper);
		return result;
	}

}
==================================================================================
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>jdbcTemplate 테스트</h1>
<hr>
<h3>${msg }</h3>

<ul>
	<li><a href="${cpath }/join">회원가입 예제</a></li>  //클릭시 controller -> step1.jsp
	<li><a href="${cpath }/list">회원목록 확인</a></li>
</ul>

</body>
</html>
-------------------
//MemberController
package com.itbank.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.model.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class MemberController {
	
	@Autowired private MemberService ms;
	
	@GetMapping("/join")
	public ModelAndView join(HttpServletRequest request) throws IOException {
		ModelAndView mav = new ModelAndView("join/step1");
		
		String path = request.getSession().getServletContext().getRealPath("resources/agreement.txt");
		System.out.println(path);
		
		String agreement = ms.getAgreement(path);
		mav.addObject("agreement", agreement);
		
		return mav;
	}
	
	@GetMapping("/join/step2")
	public ModelAndView join2(String agree, @RequestHeader("referer") String referer) {
		// @RequestHeader(name) = request.getHeader(name) 
		
		ModelAndView mav = new ModelAndView("join/step2");
		
		System.out.println("동의 : " + agree);
		System.out.println("referer : " + referer);
		
		if(agree == null) {
			mav.setViewName("alert");
			mav.addObject("msg", "약관에 동의하셔야 가입이 가능합니다");
			mav.addObject("url", referer);
		}
		return mav; //step2로 이동
	}
	
	@PostMapping("/join/step3")
	public ModelAndView join3(MemberDTO dto) {
		System.out.println(dto);
		int row = ms.insert(dto);
		ModelAndView mav = new ModelAndView();
		
		if(row == 1) {
			mav.setViewName("redirect:/"); 	// viewName 의 시작이 redirect: 이면 리다이렉트로 처리함
			// 리다이렉트는 jsp를 가리키지 않고, 요청 주소를 가리킨다 -> @RequestMapping 과 매칭되어야 한다
		}
		else {
			mav.setViewName("alert");
			mav.addObject("msg", "회원 가입 실패 !!");
		}
		return mav;
	}
	
	@GetMapping("/list")
	public ModelAndView list() {
		ModelAndView mav = new ModelAndView();
		
		List<MemberDTO> list = ms.getMemberList();
		mav.addObject("abcd", list);
		
		return mav;
	}
}
--------------------
#)join/step1.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>step1 : 회원 가입 약관 동의</h1>
<hr>

<form action="${cpath }/join/step2">
	<textarea style="width: 800px; height: 400px; resize: none;" readonly>${agreement }</textarea>
	<p>
		<label>
			<input type="checkbox" name="agree">위 사항을 읽었으며, 약관에 동의합니다  //agree로 체크했는지 확인
		</label>
	</p>
	<input type="submit" value="다음">
</form>

</body>
</html>
-----------------------
#)join/step2.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>step2 : 회원 가입 정보 입력</h1>
<hr>
<form method="POST" action="${cpath }/join/step3">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="text" name="username" placeholder="Your Name" required></p>
	<p><input type="email" name="email" placeholder="foo@bar.com" required></p>
	<p>
		<label><input type="radio" name="gender" value="남성" required>남성</label>
		<label><input type="radio" name="gender" value="여성" required>여성</label>
	</p>
	<p><input type="submit" value="가입"></p>
</form>

</body>
</html>
---------------------
//MemberDTO
package com.itbank.model;

public class MemberDTO {
	
	private String userid;
	private String userpw;
	private String username;
	private String email;
	private String gender;
	
	@Override
	public String toString() {
		return String.format("{%s, %s, %s, %s, %s}", userid, userpw, username, email, gender);
	}
	
	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getUserpw() {
		return userpw;
	}
	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
}
--------------
//memberservice
package com.itbank.service;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.MemberDAO;
import com.itbank.model.MemberDTO;

@Service
public class MemberService {

	@Autowired private MemberDAO dao;
	
	public String getAgreement(String path) throws IOException {
		String agreement = "";
		File f = new File(path);
		
		if(f.exists() == false) {
			System.out.println("파일이 없습니다 !!");
			return null;
		}
		Scanner sc = new Scanner(f);
		while(sc.hasNextLine()) {
			agreement += sc.nextLine() + "\n";
		}
		sc.close();
		return agreement;
	}

	public int insert(MemberDTO dto) {
		// 나중에 비밀번호 값을 해시처리하는 코드 추가 예정
		return dao.insert(dto);
	}

	public List<MemberDTO> getMemberList() {
		return dao.selectList();
	}
}
------------
//memberdao
package com.itbank.model;

import java.sql.ResultSet;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository
public class MemberDAO {

	@Autowired private JdbcTemplate jt;

	public int insert(MemberDTO dto) {
		String sql = "insert into member values (?, ?, ?, ?, ?)";
		return jt.update(sql, dto.getUserid(), dto.getUserpw(), dto.getUsername(), dto.getEmail(), dto.getGender());
	}
	

	public List<MemberDTO> selectList() {
		// SQL을 실행하기 위한 쿼리문
		String sql = "select * from member order by userid";
		
		// 결과를 받아서 어떻게 DTO에 맵핑할 것인가 결정하는 함수를 객체 형태로 생성
		RowMapper<MemberDTO> mapper = (ResultSet rs, int rownum) -> {
			// JSP DAO에서 while문 내부에 작성하던 코드를 그대로 작성
			MemberDTO dto = new MemberDTO();
			dto.setUserid(rs.getString("userid"));
			dto.setUserpw(rs.getString("userpw"));
			dto.setUsername(rs.getString("username"));
			dto.setEmail(rs.getString("email"));
			dto.setGender(rs.getString("gender"));
			return dto;
		};
		
		// sql문과 mapper 함수객체를 전달하면 jdbcTemplate 이 쿼리문을 수행하고 알아서 결과를 반환함
		// 이때, jt.query()는 List<T> 를 반환하고, jt.queryForObject() 는 T 를 반환한다
		List<MemberDTO> list = jt.query(sql, mapper);
		
		// 받아온 list를 반환
		return list;
	}
}
---------------------
//list.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>회원 목록 출력</h1>
<hr>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th>userid</th>
		<th>userpw</th>
		<th>username</th>
		<th>email</th>
		<th>gender</th>
	</tr>
<c:forEach var="dto" items="${abcd }">
	<tr>
		<td>${dto.userid }</td>
		<td>${dto.userpw }</td>
		<td>${dto.username }</td>
		<td>${dto.email }</td>
		<td>${dto.gender }</td>
	</tr>
</c:forEach>
</table>


</body>
</html>
---------------------
//alert.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<script>
	alert('${msg}')
	location.href = '${url}'
</script>

</body>
</html>
==============================================================================
//MemberDTO
package com.itbank.model;

public class MemberDTO {
	
	private String userid;
	private String userpw;
	private String username;
	private String email;
	private String gender;
	
	@Override
	public String toString() {
		return String.format("{%s, %s, %s, %s, %s}", userid, userpw, username, email, gender);
	}
	
	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getUserpw() {
		return userpw;
	}
	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
}
------------------
//HomeController
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.itbank.service.DBTestService;

@Controller
public class HomeController {
	
	@Autowired	// 스프링 빈 중에서 타입이 일치하는 객체를 자동으로 맵핑한다 (의존 주입)
	private DBTestService ds;// = new DBTestService();

	@RequestMapping("/")	// 요청 메서드에 상관없이 주소만으로 판별하려면 RequestMapping으로 처리하면 된다
	public String home(Model model) {

		String msg = ds.getTest();
		model.addAttribute("msg", msg);
		return "home";
	}
}
--------------------
//DBTestDAO
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.DBTestDAO;

@Service	// 스프링 빈으로 등록하는 어노테이션
public class DBTestService {
	
	@Autowired private DBTestDAO dao;
	
	public String getTest() {
		//return "메롱";
		return dao.selectVersion();
	}

}

---------------------
//DBTestDAO
package com.itbank.model;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository
public class DBTestDAO {
	
	@Autowired private JdbcTemplate jt;

	public String selectVersion() {
		String sql = "select banner from v$version";
//		RowMapper<String> rowMapper = (ResultSet rs, int rowNum) -> {
//			return rs.getString("banner");
//		};	// 람다식을 활용한 함수형 인터페이스 객체 생성
		
		RowMapper<String> rowMapper = new RowMapper<String>() {
			@Override
			public String mapRow(ResultSet rs, int rowNum) throws SQLException {
				return rs.getString("banner");
			}
		};	// 추상 클래스를 상속받는 익명클래스 객체 생성
		String result = jt.queryForObject(sql, rowMapper);
		return result;
	}

}
---------------------
//MemberService
package com.itbank.service;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.MemberDAO;
import com.itbank.model.MemberDTO;

@Service
public class MemberService {

	@Autowired private MemberDAO dao;
	
	public String getAgreement(String path) throws IOException {
		String agreement = "";
		File f = new File(path);
		
		if(f.exists() == false) {
			System.out.println("파일이 없습니다 !!");
			return null;
		}
		Scanner sc = new Scanner(f);
		while(sc.hasNextLine()) {
			agreement += sc.nextLine() + "\n";
		}
		sc.close();
		return agreement;
	}

	public int insert(MemberDTO dto) {
		// 나중에 비밀번호 값을 해시처리하는 코드 추가 예정
		return dao.insert(dto);
	}

	public List<MemberDTO> getMemberList() {
		return dao.selectList();
	}

	public MemberDTO login(MemberDTO dto) {
		return dao.selectMember(dto);
	}
}
---------------------
//MemberDAO
package com.itbank.model;

import java.sql.ResultSet;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

@Repository
public class MemberDAO {

	@Autowired private JdbcTemplate jt;
	
	// mapper 함수객체를 멤버 필드로 선언해두면, select 함수에서 참조만 시키면 된다
	private RowMapper<MemberDTO> rowMapper = (ResultSet rs, int rownum) -> {
		// JSP DAO에서 while문 내부에 작성하던 코드를 그대로 작성
		MemberDTO ob = new MemberDTO();
		ob.setUserid(rs.getString("userid"));
		ob.setUserpw(rs.getString("userpw"));
		ob.setUsername(rs.getString("username"));
		ob.setEmail(rs.getString("email"));
		ob.setGender(rs.getString("gender"));
		return ob;
		// 결과를 받아서 어떻게 DTO에 맵핑할 것인가 결정하는 함수를 객체 형태로 생성
		// sql문과 mapper 함수객체를 전달하면 jdbcTemplate 이 쿼리문을 수행하고 알아서 결과를 반환함
		// 이때, jt.query()는 List<T> 를 반환하고, jt.queryForObject() 는 T 를 반환한다
	};

	public int insert(MemberDTO dto) {
		String sql = "insert into member values (?, ?, ?, ?, ?)";
		return jt.update(sql, dto.getUserid(), dto.getUserpw(), dto.getUsername(), dto.getEmail(), dto.getGender());
	}

	public List<MemberDTO> selectList() {
		String sql = "select * from member order by userid";
		List<MemberDTO> list = jt.query(sql, rowMapper);
		return list;
	}

	public MemberDTO selectMember(MemberDTO dto) {
		String sql = "select * from member where userid=? and userpw=?";
		MemberDTO login = jt.queryForObject(sql, new Object[]{dto.getUserid(), dto.getUserpw()}, rowMapper); 
		return login;
	}
}
---------------------
//LoginController
package com.itbank.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.model.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class LoginController {
	
	@Autowired private MemberService ms;

	@GetMapping("/login")
	public void login() {}
	// 1) 요청 주소는 브라우저 주소창에서 ContextPath 이전을 제외한 주소
	// 2) 링크를 클릭하여 이동하므로 GetMapping
	// 3) 화면에 띄울 JSP에서 객체를 받아서 출력할 일이 없다면 Model을 사용하지 않는다
	// 4) 요청 주소와 JSP의 이름이 일치한다면 viewName을 반환할 필요가 없다 (void)
	
	
	@PostMapping("/login")
	public String login(MemberDTO dto, HttpSession session) {
		// 1) 입력 정보와 일치하는 계정이 있는가 확인
		MemberDTO login = ms.login(dto);
		System.out.println("확인 : " + login);
		session.setAttribute("login", login);
		session.setMaxInactiveInterval(600);
		return "redirect:/";		// 리다이렉트하면 request는 변경되지만 session은 유지된다 !!
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/";
	}
	
	// 특정 예외가 발생할 경우 처리하는 함수
	//아래 에러는 데이터에 접근할 때 결과가 적어도 1줄 이상 있어야 하지만 실제로 아무런 줄도 리턴되지 않을 때 발생하는 예외이다.

	@ExceptionHandler(EmptyResultDataAccessException.class)	// DataAccessException
	public ModelAndView loginFail(EmptyResultDataAccessException e) {
		System.out.println(e);
		ModelAndView mav = new ModelAndView("alert");
		mav.addObject("msg", "로그인 실패. 계정과 비밀번호를 다시 확인해주세요");
		mav.addObject("url", "/day02/login");
		return mav;
	}
	// @ExceptionHandler 는 현재 컨트롤러 안에서 발생하는 예외만 처리한다
	// 만약, 넓은 범위의 예외를 처리하려면 예외의 상위 클래스를 명시할 수 있다
	
	// @ControllerAdvice 는 전역에서 발생하는 예외를 묶어서 처리하는 클래스이며, 하위 메서드로 @ExceptionHandler를 가질 수 있다
}

// 스프링 빈으로 등록하는 어노테이션
// @Controller
// @Service
// @Repository
// @Component
---------------------
//MemberController
package com.itbank.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.model.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class MemberController {
	
	@Autowired private MemberService ms;

	@GetMapping("/join")
	public ModelAndView join(HttpServletRequest request) throws IOException {
		ModelAndView mav = new ModelAndView("join/step1");
		
		String path = request.getSession().getServletContext().getRealPath("resources/agreement.txt");
		System.out.println(path);
		
		String agreement = ms.getAgreement(path);
		mav.addObject("agreement", agreement);
		
		return mav;
	}
	
	@GetMapping("/join/step2")
	public ModelAndView join2(String agree, @RequestHeader("referer") String referer) {
		// @RequestHeader(name) = request.getHeader(name) 
		
		ModelAndView mav = new ModelAndView("join/step2");
		
		System.out.println("동의 : " + agree);
		System.out.println("referer : " + referer);
		
		if(agree == null) {
			mav.setViewName("alert");
			mav.addObject("msg", "약관에 동의하셔야 가입이 가능합니다");
			mav.addObject("url", referer);
		}
		return mav;
	}
	
	@PostMapping("/join/step3")
	public ModelAndView join3(MemberDTO dto) {
		System.out.println(dto);
		int row = ms.insert(dto);
		ModelAndView mav = new ModelAndView();
		
		if(row == 1) {
			mav.setViewName("redirect:/"); 	// viewName 의 시작이 redirect: 이면 리다이렉트로 처리함
			// 리다이렉트는 jsp를 가리키지 않고, 요청 주소를 가리킨다 -> @RequestMapping 과 매칭되어야 한다
		}
		else {
			mav.setViewName("alert");
			mav.addObject("msg", "회원 가입 실패 !!");
		}
		return mav;
	}
	
	@GetMapping("/list")
	public ModelAndView list() {
		ModelAndView mav = new ModelAndView();
		
		List<MemberDTO> list = ms.getMemberList();
		mav.addObject("abcd", list);
		
		return mav;
	}
}
---------------------
//ExceptionHandle.java
package com.itbank.exception;

import java.io.IOException;

import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;

@ControllerAdvice
public class ExceptionHandle {

	@ExceptionHandler(IOException.class)
	public ModelAndView ioex(IOException e) {
		System.out.println(e);
		ModelAndView mav = new ModelAndView("redirect:/");
		return mav;
	}
}
-------------------------
//alert.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<script>
	alert('${msg}')
	location.href = '${url}'
</script>

</body>
</html>
-------------------------
//HomeController
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>jdbcTemplate 테스트</h1>
<div class="info">
	<div>${login.userid }</div>
</div>
<hr>
<h3>${msg }</h3>

<ul>
	<li><a href="${cpath }/join">회원가입 예제</a></li>
	<li><a href="${cpath }/list">회원목록 확인</a></li>
	
	<c:if test="${empty login }">
		<li><a href="${cpath }/login">로그인 예제</a></li>
	</c:if>
	<c:if test="${not empty login }">
		<li><a href="${cpath }/logout">로그아웃 예제</a></li>
	</c:if>
</ul>

</body>
</html>
-----------------------------
//list.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>회원 목록 출력</h1>
<hr>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th>userid</th>
		<th>userpw</th>
		<th>username</th>
		<th>email</th>
		<th>gender</th>
	</tr>
<c:forEach var="dto" items="${abcd }">
	<tr>
		<td>${dto.userid }</td>
		<td>${dto.userpw }</td>
		<td>${dto.username }</td>
		<td>${dto.email }</td>
		<td>${dto.gender }</td>
	</tr>
</c:forEach>
</table>


</body>
</html>
-------------------
//login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>로그인 예제</h1>
<hr>

<form method="POST">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="submit" value="로그인"></p>
</form>

</body>
</html>
--------------------------
//step1.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>step1 : 회원 가입 약관 동의</h1>
<hr>

<form action="${cpath }/join/step2">
	<textarea style="width: 800px; height: 400px; resize: none;" readonly>${agreement }</textarea>
	<p>
		<label>
			<input type="checkbox" name="agree">위 사항을 읽었으며, 약관에 동의합니다
		</label>
	</p>
	<input type="submit" value="다음">
</form>

</body>
</html>
-------------------------
//step2.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>step2 : 회원 가입 정보 입력</h1>
<hr>
<form method="POST" action="${cpath }/join/step3">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="text" name="username" placeholder="Your Name" required></p>
	<p><input type="email" name="email" placeholder="foo@bar.com" required></p>
	<p>
		<label><input type="radio" name="gender" value="남성" required>남성</label>
		<label><input type="radio" name="gender" value="여성" required>여성</label>
	</p>
	<p><input type="submit" value="가입"></p>
</form>

</body>
</html>
==============================================================================
//root-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="user" value="c##itbank" />
		<property name="password" value="it" />
		<property name="maxPoolSize" value="100" />
		<property name="maxIdleTime" value="600" />
		<property name="idleConnectionTestPeriod" value="300" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<mybatis-spring:scan base-package="com.itbank.model" />
	
	<!-- jdbcTemplate 대신 다른 객체를 선언해서 사용할 것이므로 주석 처리 -->
<!-- 	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> -->
<!-- 		<property name="dataSource" ref="dataSource" /> -->
<!-- 	</bean> -->
	
		
</beans>
---------------
//TestService
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.TestDAO;

@Service
public class TestService {

	@Autowired private TestDAO dao;
	
	public String getTest() {
		String test = dao.selectVersion();
		return test;
	}

	
}
-----------------
//TestDAO
package com.itbank.model;

import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository
public interface TestDAO {

	@Select("select banner from v$version")
	String selectVersion();

}
------------------
//HomeController
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.service.TestService;

@Controller
public class HomeController {
	
	@Autowired private TestService ts;
	
	@RequestMapping("/")
	public ModelAndView home() {
		ModelAndView mav = new ModelAndView("home");
		String test = ts.getTest();
		mav.addObject("test", test);
		return mav;
	}
}
---------------------
//BookDTO
package com.itbank.model;

import java.sql.Date;

//  TABLE : BOOK
//	IDX			NUMBER				No	"C##ITBANK"."BOOK_SEQ"."NEXTVAL"
//	NAME		VARCHAR2(200 BYTE)	No	
//	AUTHOR		VARCHAR2(50 BYTE)	No	
//	PUBLISHER	VARCHAR2(100 BYTE)	No	
//	PUBLISHDATE	DATE				No	
//	PRICE		NUMBER				No	
//	DESCRIPTION	VARCHAR2(2000 BYTE)	No	

public class BookDTO {

	private int idx;
	private String name, author, publisher;
	private Date publishDate;
	private int price;
	private String description;
	
	public int getIdx() {
		return idx;
	}
	public void setIdx(int idx) {
		this.idx = idx;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public String getPublisher() {
		return publisher;
	}
	public void setPublisher(String publisher) {
		this.publisher = publisher;
	}
	public Date getPublishDate() {
		return publishDate;
	}
	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
}
--------------------
//BookController
package com.itbank.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.model.BookDTO;
import com.itbank.service.BookService;

@Controller
public class BookController {
	
	@Autowired private BookService bs;

	@GetMapping("/bookList")
	public ModelAndView bookList() {
		ModelAndView mav = new ModelAndView();
		List<BookDTO> list = bs.getList();
		mav.addObject("list", list);
		return mav;
	}
	
	@GetMapping("/insert")		// 입력할 수 있는 페이지 (form) 을 화면에 띄워주면 끝
	public void insert() {}	
	
	@PostMapping("/insert")		// 입력한 내용을 DTO로 받아서, DAO에 전달하면 끝
	public String insert(BookDTO dto) {
		int row = bs.add(dto);
		System.out.println(row == 1 ? "성공" : "실패");
		return "redirect:/bookList";	// 추가되고 나서 목록에서 확인 할 수 있도록
	}
	
	@GetMapping("/update/{idx}")
	public ModelAndView update(@PathVariable int idx) {
		ModelAndView mav = new ModelAndView("update");
		BookDTO dto = bs.selectOne(idx);
		mav.addObject("dto", dto);
		return mav;
	}
	
	@PostMapping("/update/{idx}")
	public ModelAndView update(BookDTO dto) {
		int row = bs.update(dto);
		ModelAndView mav = new ModelAndView("redirect:/bookList");
		return mav;
	}	
}
---------------------
//BookService
package com.itbank.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.BookDAO;
import com.itbank.model.BookDTO;

@Service
public class BookService {
	
	@Autowired private BookDAO dao;

	public List<BookDTO> getList() {
		List<BookDTO> list = dao.selectList();
		return list;
	}

	public int add(BookDTO dto) {
		int row = dao.insert(dto);
		return row;
	}

	public BookDTO selectOne(int idx) {
		BookDTO dto = dao.selectOne(idx);
		return dto;
	}

	public int update(BookDTO dto) {
		return dao.update(dto);
	}

}
---------------------
//BookDAO
package com.itbank.model;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;

// @Repository		
// myBatis:spring-scan 으로 찾을때는 실제 작업을 프록시 객체가 처리하므로 @Repository 안해도 됨
public interface BookDAO {

	@Select("select * from book order by idx")
	List<BookDTO> selectList();

	@Insert("insert into book values (book_seq.nextval, "
			+ "#{name}, #{author}, #{publisher}, #{publishDate}, #{price}, #{description})")
	int insert(BookDTO dto);
	
	// #{} 는 매개변수의 getter 에 접근하며, 자료형에 따라 따옴표 처리하거나 숫자이면 따옴표 붙이지 않는다
	// ${} 는 매개변수의 getter 에 접근하며, 자료형에 상관없이 따옴표 처리 및 변환 없이 그대로 맵핑한다
	// 특수한 경우를 제외하면, myBatis는 매개변수로 하나의 Object만 받는다
	// 여러 매개변수를 묶어서 전달하려면 HashMap을 사용할 수 있다
	
	@Select("select * from book where idx = #{idx}")
	BookDTO selectOne(int idx);
	
	@Update("update book set "
			+ "name = #{name}, "
			+ "author = #{author}, "
			+ "publisher = #{publisher}, "
			+ "publishDate = #{publishDate}, "
			+ "price = #{price}, "
			+ "description = #{description} "
			+ "where idx = #{idx}")
	int update(BookDTO dto);
	
	@Delete("delete book where idx = #{idx}")
	int delete(int idx);

}
---------------------------
//header.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>header.jsp</title>
<style>
	body {
		width: 100%;
		overflow-x: hidden; 
	}
	nav > ul {
		display: flex;
		padding-left: 0;
		list-style: none;
		width: 800px;
		justify-content: center;
	}
	nav > ul > li {
		width: 100px;
		height: 40px;
		display: flex;
		justify-content: center;
		align-items: center;
		border: 1px solid grey;
		border-right: 0;
	}
	nav > ul > li:last-child {
		border-right: 1px solid grey;
	}
	nav > ul > li > a {
		text-decoration: none;
		display: block;
		background-color: black;
		color: white;
		width: 100%;
		height: 100%;
		text-align: center;
		line-height: 40px;
		font-weight: bold;
	}
	
</style>
</head>
<body>
<h1>myBatis 테스트 (1)</h1>
<nav>
	<ul>
		<li><a href="${cpath }/bookList">목록</a></li>
		<li><a href="${cpath }/insert">추가</a></li>
	</ul>
</nav>
-----------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h3>DB 접속 정보 : ${test }</h3>

</body>
</html>
----------------
//bookList.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h3>도서 목록</h3>

<table>
	<thead>
		<tr>
			<th>번호</th>
			<th>도서명</th>
			<th>저자</th>
			<th>출판사</th>
			<th>출판일자</th>
			<th>가격</th>
			<th>설명</th>
			<th>수정</th>
			<th>삭제</th>
		</tr>
	</thead>
	<tbody>
		<c:forEach var="dto" items="${list }">
		<tr>
			<td>${dto.idx }</td>
			<td>${dto.name }</td>
			<td>${dto.author }</td>
			<td>${dto.publisher }</td>
			<td>${dto.publishDate }</td>
			<td>${dto.price }</td>
			<td>${dto.description }</td>
			<td><a href="${cpath }/update/${dto.idx}"><button>수정</button></a></td>
			<td><button class="deleteBtn" data-idx="${dto.idx }">삭제</button></td>
		</tr>
		</c:forEach>
	</tbody>
</table>

<script>
	const cpath = '${cpath}'

	document.querySelectorAll('.deleteBtn').forEach(function(btn) {
		btn.onclick = function(event) {
			const idx = event.target.dataset.idx
			if(confirm('정말 ' + idx + '번 도서를 삭제하시겠습니까?')) {
				location.href = cpath + '/delete/' + idx
			}
		}
	})
</script>

</body>
</html>
--------------------
//insert.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h3>도서 추가</h3>

<form method="POST">
	<p><input type="text" name="name" required autofocus placeholder="도서명"></p>
	<p><input type="text" name="author" required placeholder="저자"></p>
	<p><input type="text" name="publisher" required placeholder="출판사"></p>
	<p><input type="date" name="publishDate" required></p>
	<p><input type="number" name="price" required placeholder="가격" step="100"></p>
	<p><input type="text" name="description" required placeholder="도서 소개글"></p>
	<p><input type="submit"></p>
</form>

</body>
</html>
---------------------
//update.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h3>도서 수정</h3>

<form method="POST">
	<p><input type="text" name="name" required autofocus value="${dto.name }"></p>
	<p><input type="text" name="author" required value="${dto.author }"></p>
	<p><input type="text" name="publisher" required value="${dto.publisher }"></p>
	<p><input type="date" name="publishDate" required value="${dto.publishDate }"></p>
	<p><input type="number" name="price" required value="${dto.price }" step="100"></p>
	<p><input type="text" name="description" required value="${dto.description }"></p>
	<p><input type="submit" value="수정"></p>
</form>

</body>
</html>
==============================================================================
//root-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
			Connection을 관리해주는 dataSource는 hikariCP로 처리하고,
			DB에 접속 및 쿼리문 수행, 객체-관계 맵핑은 myBatis 로 처리한다
	 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- myBatis 에서 xml형식의 mapper 파일을 작성할때 사용하는 설정 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
		
		<!-- mapper 파일의 경로를 리스트 형식으로 작성 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:config/sqlmap-test.xml</value>
				<value>classpath:config/sqlmap-member.xml</value>
				<value>classpath:config/sqlmap-login.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<context:component-scan base-package="com.itbank.member" />
	
	<mybatis-spring:scan base-package="com.itbank.model" /><!-- interface만 -->
		
</beans>

==============================================================================
//servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.itbank.controller" />
	
	
	
</beans:beans>        //*/

==============================================================================
//HomeController
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.service.TestService;

@Controller
public class HomeController {
	
	@Autowired private TestService ts;
	
	@RequestMapping("/")
	public ModelAndView home() {
		ModelAndView mav = new ModelAndView("home");
		String test = ts.getTest();
		mav.addObject("test", test);
		return mav;
	}
}
-----------------------
//MemberController
package com.itbank.controller;

import java.sql.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.member.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class MemberController {

	@Autowired private MemberService ms;
	
	@GetMapping("/memberList")
	public ModelAndView memberList() {
		ModelAndView mav = new ModelAndView();
		
		String test = ms.getTest();
		mav.addObject("test", test);
		
		Date now = ms.getSysdate();
		mav.addObject("now", now);
		
		List<MemberDTO> list = ms.getList();
		mav.addObject("list", list);
		
		return mav;
	}

	@GetMapping("/memberList/{order}")
	public ModelAndView memberList(@PathVariable String order) {
		ModelAndView mav = new ModelAndView("memberList");
		System.out.println(order);
		List<MemberDTO> list = ms.selectOrderBy(order);
		mav.addObject("list", list);
		return mav;
	}

	@GetMapping("/memberAdd")
	public void memberAdd() {}
	
	@PostMapping("/memberAdd")
	public ModelAndView memberAdd(MemberDTO dto) {
		ModelAndView mav = new ModelAndView("redirect:/memberList");
		int row = ms.insert(dto);
		return mav;
	}
	
	@GetMapping("/loginTest")
	public void loginTest() {}
	
	@PostMapping("loginTest")
	public ModelAndView loginTest(MemberDTO dto) {
		MemberDTO login = ms.loginTest(dto);
		System.out.println(login == null ? "실패 " : "로그인 사용자 : " + login.getUserid());
		ModelAndView mav = new ModelAndView("redirect:/");
		return mav;
	}
}
-------------------------
//TestService
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.TestDAO;

@Service
public class TestService {

	@Autowired private TestDAO dao;
	
	public String getTest() {
		return dao.selectVersion();
	}
}
---------------------------
//MemberService
package com.itbank.service;

import java.sql.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.member.MemberDAO;
import com.itbank.member.MemberDTO;
import com.itbank.member.MemberTestDAO;
import com.itbank.model.LoginDAO;

@Service
public class MemberService {
	
	@Autowired private MemberDAO dao;
	@Autowired private MemberTestDAO tdao;
	
	@Autowired private LoginDAO ldao;	// 인터페이스 DAO

	public String getTest() {
		String test = tdao.selectVersion();
		return test;
	}

	public Date getSysdate() {
		return tdao.selectSysdate();
	}

	public List<MemberDTO> getList() {
		return dao.selectList();
	}

	public List<MemberDTO> selectOrderBy(String order) {
		return dao.selectList(order);
	}

	public int insert(MemberDTO dto) {
		return dao.insert(dto);
	}

	public MemberDTO loginTest(MemberDTO dto) {
		return ldao.login(dto);
	}

}
------------------------
//TestDAO
package com.itbank.model;

import org.apache.ibatis.annotations.Select;

public interface TestDAO {

	@Select("select banner from v$version")
	String selectVersion();
}

-----------------------
//LoginDAO
package com.itbank.model;

import com.itbank.member.MemberDTO;

public interface LoginDAO {
	MemberDTO login(MemberDTO dto); //멤버를 반환
	
}
--------------------------
//MemberDTO
package com.itbank.member;

public class MemberDTO {

	private String userid, userpw, username, email, gender;

	public String getUserid() {
		return userid;
	}

	public void setUserid(String userid) {
		this.userid = userid;
	}

	public String getUserpw() {
		return userpw;
	}

	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}
	
}
--------------------------
//MemberTestDAO
package com.itbank.member;

import java.sql.Date;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MemberTestDAO {	

	@Autowired private SqlSessionTemplate sst;
	
	// DB의 버전정보를 String 형식으로 반환하는 함수를 작성하고 싶다
	public String selectVersion() {
		String statement = "test1";				// test1 이라는 id의 mapper 코드를 호출
		String test = sst.selectOne(statement);	// 지정한 sql로 하나의 문자열을 반환받겠다
		return test;							// DB에서 받은 내용을 Service로 반환
	}
	
	public Date selectSysdate() {
		
		return sst.selectOne("now");
	}
}
-----------------------
//MemberDAO
package com.itbank.member;

import java.util.List;

import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

@Repository
public class MemberDAO {

	@Autowired private SqlSessionTemplate sst;

	public List<MemberDTO> selectList() {
		List<MemberDTO> list = sst.selectList("itbank");
		
//		sst.selectList(statement);
//		별도의 매개변수 전달 없이 id만으로 호출하는 형식
		
//		sst.selectList(statement, parameter);
//		파라미터를 DTO 타입이나 HashMap 타입으로 지정하여 전달한다
		
//		sst.selectList(statement, parameter, rowBounds);
//		파라미터를 전달하면서 결과를 myBatis에 의해서 페이징 처리하여 가져온다
		
		return list;
	}

	public List<MemberDTO> selectList(String order) {
		List<MemberDTO> list = sst.selectList("selectOrder", order);
		return list;
	}

	public int insert(MemberDTO dto) {
		int row = sst.insert("insert", dto);
		return row;
	}
}
---------------------
//config/sqlmap-config.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC 
	"-//mybatis.org//DTD Config 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-config.dtd">
	
<configuration>
	<settings>
		<setting name="cacheEnabled" value="false" />
		<setting name="useGeneratedKeys" value="false" />
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- 	user_name => userName	-->
	</settings>
	
	<typeAliases>
		<typeAlias type="com.itbank.member.MemberDTO" alias="member" />
	</typeAliases>
	<!-- type == 자료형, 자료형 이름이 너무 길어서 별명으로 부르면 길이를 짧게 사용할 수 있다 -->
	
</configuration>
------------------------
//config/sqlmap-test.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="MemberTestDAO">
	<!-- sst.selectOne(statement), statement가 id에 맵핑 -->
	<!-- select 이므로 반환하는 데이터의 자료형을 명시해야 처리가 가능하다 -->
	
	<select id="test1" resultType="string">
		select banner from v$version
	</select>
	
	<select id="now" resultType="java.sql.Date">
		select sysdate from dual
	</select>
	
</mapper>	
----------------------
//config/sqlmap-login.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.model.LoginDAO">	<!-- namespace : 패키지.인터페이스DAO -->
	<select id="login" resultType="member" parameterType="member"> <!-- id: 인터페이스의 메서드이름 -->
		select * from member where userid = #{userid} and userpw = #{userpw}
	</select>
</mapper>	
-------------------------
//config/sqlmap-member.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="MemberDAO">
<!--<select id="itbank" resultType="com.itbank.member.MemberDTO"> -->
	<select id="itbank" resultType="member"> //config.xml에서 alias설정한거
		select * from member
	</select>
	
	<select id="selectOrder" resultType="member" parameterType="String">
		select * from member order by ${order}
	</select>
	
	<insert id="insert" parameterType="member">
		insert into member values (
			#{userid}, 
			#{userpw}, 
			#{username}, 
			#{email}, 
			#{gender}
		)
	</insert>
</mapper>	
----------------------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>myBatis 연습 (2)</h1>
<hr>

<h3>DB 접속 정보 : ${test }</h3>

<ul>
	<li><a href="${cpath }/memberList">회원 목록</a></li>
	<li><a href="${cpath }/memberList/username">회원 목록 - 이름순으로 정렬</a></li>
	<li><a href="${cpath }/memberList/userid">회원 목록 - ID순으로 정렬</a></li>
	<li><a href="${cpath }/memberAdd">회원 추가</a></li>
	<li><a href="${cpath }/loginTest">로그인 테스트</a></li>
</ul>

</body>
</html>
-------------------------------
//loginTest.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>로그인 테스트 (인터페이스 DAO와 xml을 연결하는 형태)</h1>
<hr>

<form method="POST">
	<p><input name="userid" placeholder="ID"></p>
	<p><input name="userpw" type="password" placeholder="Password"></p>
	<p><input type="submit"></p>
</form>

</body>
</html>
------------------------------
//memberList.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>회원 목록</h1>
<hr>
<h3>${test }</h3>
<h3>${now }</h3>

<%-- list 확인 : ${list } --%>
<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th>userid</th>
		<th>userpw</th>
		<th>username</th>
		<th>email</th>
		<th>gender</th>
	</tr>
	<c:forEach var="dto" items="${list }">
	<tr>
		<td>${dto.userid }</td>
		<td>${dto.userpw }</td>
		<td>${dto.username }</td>
		<td>${dto.email }</td>
		<td>${dto.gender }</td>
	</tr>
	</c:forEach>
</table>


</body>
</html>
----------------------
//memberAdd.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>회원 추가</h1>
<hr>
<form method="POST">
	<p><input type="text" name="userid" placeholder="ID (Primary Key)" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="text" name="username" placeholder="Name" required></p>
	<p><input type="email" name="email" placeholder="foo@bar.com" required></p>
	<p>
		<label><input type="radio" name="gender" value="남성" required>남성</label>
		<label><input type="radio" name="gender" value="여성" required>여성</label>
	</p>
	<p><input type="submit"></p>
</form>

</body>
</html>
===========================================================
//root-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
			Connection을 관리해주는 dataSource는 hikariCP로 처리하고,
			DB에 접속 및 쿼리문 수행, 객체-관계 맵핑은 myBatis 로 처리한다
	 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- myBatis 에서 xml형식의 mapper 파일을 작성할때 사용하는 설정 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
		
		<!-- mapper 파일의 경로를 리스트 형식으로 작성 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:config/sqlmap-member.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<context:component-scan base-package="com.itbank.member" />
	
	<mybatis-spring:scan base-package="com.itbank.model" /><!-- interface만 -->
	<mybatis-spring:scan base-package="com.itbank.member" />
		
</beans>
------------------
//servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.itbank.controller" />
	
	
	
</beans:beans> */
------------------
//HomeController
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.service.TestService;

@Controller
public class HomeController {
	
	@Autowired private TestService ts;

	@RequestMapping("/")
	public ModelAndView home() {
		ModelAndView mav = new ModelAndView("home");
		String test = ts.getTest();
		mav.addObject("test", test);
		return mav;
	}
}
---------------------
//MemberController
package com.itbank.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.member.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class MemberController {
	
	@Autowired private MemberService ms;

	@GetMapping("/memberList")
	public ModelAndView memberList() {
		ModelAndView mav = new ModelAndView();
		List<MemberDTO> list = ms.getMemberList();
		mav.addObject("list", list);
		return mav;
	}
	
	@GetMapping("/loginTest") 
	public void loginTest() {}
	
	@PostMapping("/loginTest")
	public String loginTest(MemberDTO dto) {
		MemberDTO login = ms.login(dto);
		System.out.println(login == null ? "실패" : "성공 : " + login.getUserid());
		return "redirect:/";
	}
}
------------------
//TestService
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.TestDAO;

@Service
public class TestService {
	
	@Autowired private TestDAO dao;

	public String getTest() {
//		return "서현씨 다 됐나요?";
		return dao.selectVersion();
	}

}
--------------------
//MemberService
package com.itbank.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.member.MemberDAO;
import com.itbank.member.MemberDTO;

@Service
public class MemberService {

	@Autowired private MemberDAO dao;
	
	public List<MemberDTO> getMemberList() {
		List<MemberDTO> list = dao.selectList();
		
		// 리스트 내부의 각 객체에 대해서, 비밀번호의 첫글자를 제외한 나머지를 *로 변경하여 반환
		for(MemberDTO dto : list) {
			String pass = dto.getUserpw();
			String newPass = pass.charAt(0) + "";
			for(int i = 0; i < pass.length() - 1; i++) {
				newPass += "*";
			}
			dto.setUserpw(newPass);
		}
		return list;
	}

	public MemberDTO login(MemberDTO dto) {
		MemberDTO login = dao.selectMember(dto);
		return login;
	}

}
--------------------
//TestDAO
package com.itbank.model;

import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository
public interface TestDAO {

	@Select("select banner from v$version")
	String selectVersion();

	
}
-------------------
//MemberDTO
package com.itbank.member;

// LOMBOK : getter/setter/contructor/toString
public class MemberDTO {
	
	private String userid, userpw, username, email, gender;

	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getUserpw() {
		return userpw;
	}
	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	
	

}
-------------------------
//MemberDAO
package com.itbank.member;

import java.util.List;

import org.apache.ibatis.annotations.Select;

public interface MemberDAO {

	@Select("select * from member order by userid")
	List<MemberDTO> selectList();

	// 어노테이션 대신 XML 설정으로 쿼리문 수행하기
	// namespace 는 패키지.인터페이스이름
	// id는 메서드이름
	
	// <mapper namespace="com.itbank.member.MemberDAO">
	//		<select id="selectMembmer" resultType="com.itbank.member.MemberDTO">
	//			select * from member where userid = #{userid} and userpw = #{userpw}
	//		</select>
	// </mapper>
	MemberDTO selectMember(MemberDTO dto);

}
-------------------------
//sqlmap-text.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="MemberTestDAO">
	<!-- sst.selectOne(statement), statement가 id에 맵핑 -->
	<!-- select 이므로 반환하는 데이터의 자료형을 명시해야 처리가 가능하다 -->
	
	<select id="test1" resultType="string">
		select banner from v$version
	</select>
	
	<select id="now" resultType="java.sql.Date">
		select sysdate from dual
	</select>
	
</mapper>	
--------------------------
//sqlmap-member.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.member.MemberDAO">
	<select id="selectMember" resultType="member">
		select * from member where userid = #{userid} and userpw = #{userpw}
	</select>
</mapper>
---------------------------
//sqlmap-login.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.model.LoginDAO">	<!-- namespace : 패키지.인터페이스DAO -->
	<select id="login" resultType="member" parameterType="member"> <!-- id: 인터페이스의 메서드이름 -->
		select * from member where userid = #{userid} and userpw = #{userpw}
	</select>
</mapper>	
--------------------------------
//sqlmap-config.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC 
	"-//mybatis.org//DTD Config 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-config.dtd">
	
<configuration>
	<settings>
		<setting name="cacheEnabled" value="false" />
		<setting name="useGeneratedKeys" value="false" />
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- 	user_name => userName	-->
	</settings>
	
	<typeAliases>
		<typeAlias type="com.itbank.member.MemberDTO" alias="member" />
	</typeAliases>
	
</configuration>
--------------------------------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>로그인 가능한 Book</h1>
<hr>
<h3>DB 접속 정보 : ${test }</h3>
${cpath }
<ul>
	<li><a href="${cpath }/memberList">회원 목록</a></li>
	<li><a href="${cpath }/loginTest">로그인 테스트</a></li>
</ul>


</body>
</html>
------------------------------------
//loginTest.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>로그인 테스트</h1>
<hr>
<form method="POST">
	<p><input type="text" name="userid"></p>
	<p><input type="password" name="userpw"></p>
	<p><input type="submit"></p>
</form>

</body>
</html>
-----------------------------
//memberList.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1>회원 목록</h1>
<hr>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th>userid</th>
		<th>userpw</th>
		<th>username</th>
		<th>email</th>
		<th>gender</th>
	</tr>
	<c:forEach var="member" items="${list }">
	<tr>
		<td>${member.userid }</td>
		<td>${member.userpw }</td>
		<td>${member.username }</td>
		<td>${member.email }</td>
		<td>${member.gender }</td>
	</tr>
	</c:forEach>
</table>

</body>
</html>

=================================================================================
//day07
//servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.itbank.controller" />
	
	
	
</beans:beans> */
----------------------
//root-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
			Connection을 관리해주는 dataSource는 hikariCP로 처리하고,
			DB에 접속 및 쿼리문 수행, 객체-관계 맵핑은 myBatis 로 처리한다
	 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- myBatis 에서 xml형식의 mapper 파일을 작성할때 사용하는 설정 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
		
		<!-- mapper 파일의 경로를 리스트 형식으로 작성 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:config/sqlmap-member.xml</value>
				<value>classpath:config/sqlmap-book.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<context:component-scan base-package="com.itbank.member" />
	
	<mybatis-spring:scan base-package="com.itbank.model" /><!-- interface만 -->
	<mybatis-spring:scan base-package="com.itbank.member" />
	<mybatis-spring:scan base-package="com.itbank.book" />
		
</beans>
----------------------
//HomeController.java
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.service.TestService;

@Controller
public class HomeController {
	
	@Autowired private TestService ts;

	@RequestMapping("/")
	public ModelAndView home() {
		ModelAndView mav = new ModelAndView("home");
		String test = ts.getTest();
		mav.addObject("test", test);
		return mav;
	}
}
-------------------------
//MemberController.java
package com.itbank.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.member.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class MemberController {
	
	@Autowired private MemberService ms;

	@GetMapping("/memberList")
	public ModelAndView memberList() {
		ModelAndView mav = new ModelAndView();
		List<MemberDTO> list = ms.getMemberList();
		mav.addObject("list", list);
		return mav;
	}
	
	@GetMapping("/join")
	public void join() {}
	
	@PostMapping("/join")
	public String join(MemberDTO dto) {
		int row = ms.join(dto);
		System.out.println(row == 1 ? "가입 성공" : "가입 실패");
		return "redirect:/login";
	}
	
	@GetMapping("/login") 
	public void login() {}
	
	@PostMapping("/login")
	public String login(MemberDTO dto, HttpSession session) {
		MemberDTO login = ms.login(dto);		// DB에서 받아온 계정을
		session.setAttribute("login", login);	// 현재 세션에 저장
		System.out.println(login == null ? "실패" : "성공 : " + login.getUserid());
		return "redirect:/";
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/";
	}
	
	@GetMapping("/newPass")
	public void newPass() {}
	
	@PostMapping("/newPass")
	public ModelAndView newPass(MemberDTO dto) {
		ModelAndView mav = new ModelAndView("alert");
		
		// ID와 Email이 일치하는 계정이 있는가
		MemberDTO target = ms.findMemberByEmail(dto);
		
		if(target != null) {
			// 계정이 있으면, 새로 문자열을 만들어서 update 하고
			String newPass = ms.newPass(target);
			
			// 사용자에게 신규 비밀번호를 alert을 통해서 알려주기
			// 로그인 페이지로 이동
			mav.addObject("msg", "변경된 비밀번호는 [" + newPass + "] 입니다");
			mav.addObject("url", "/login");
		}
		else {
			// 일치하는 계정이 없다는 메시지를 alert을 통해서 알려주기
			// 이전페이지로 이동
			mav.addObject("msg", "입력한 정보와 일치하는 계정이 없습니다");
		}
		return mav;
	}
	
	@ExceptionHandler(DuplicateKeyException.class)	// PK나 UK가 중복되어 발생하는 예외
	public ModelAndView duplicateJoin(DuplicateKeyException e) {
		ModelAndView mav = new ModelAndView("alert");
		mav.addObject("msg", "이미 사용중인 ID입니다. 다른 ID로 가입을 시도해 주세요");
		return mav;
	}
}
----------------
//BookController.java
package com.itbank.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.book.BookDTO;
import com.itbank.service.BookService;

@Controller
public class BookController {

	@Autowired private BookService bs;
	
	@GetMapping("/bookList")
	public String bookList() {
//		return bookList("idx");
		return "redirect:/bookList/idx";
	}
	
	@GetMapping("/bookList/{order}")
	public ModelAndView bookList(@PathVariable String order) {
		ModelAndView mav = new ModelAndView("bookList");
		List<BookDTO> list = bs.getList(order);
		mav.addObject("list", list);
		return mav;
	}
}
---------------------
//TestService
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.TestDAO;

@Service
public class TestService {
	
	@Autowired private TestDAO dao;

	public String getTest() {
//		return "서현씨 다 됐나요?";
		return dao.selectVersion();
	}

}
-------------------------
//MemberService
package com.itbank.service;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.member.MemberDAO;
import com.itbank.member.MemberDTO;

@Service
public class MemberService {

	@Autowired private MemberDAO dao;
	
	public List<MemberDTO> getMemberList() {
		List<MemberDTO> list = dao.selectList();
		
		// 리스트 내부의 각 객체에 대해서, 비밀번호의 첫글자를 제외한 나머지를 *로 변경하여 반환
		for(MemberDTO dto : list) {
			String pass = dto.getUserpw();
			String newPass = pass.charAt(0) + ""; //문자열로 바꾸기 위해 뒤에  + "" 추가
			for(int i = 0; i < pass.length() - 1; i++) {
				newPass += "*";
			}
			dto.setUserpw(newPass);
		}
		return list;
	}

	public MemberDTO login(MemberDTO dto) {
		MemberDTO login = dao.selectMember(dto);	// userid, userpw
		System.out.println("비밀번호로 찾은 계정 : " + login);
		return login;
	}

	public int join(MemberDTO dto) {
		return dao.insert(dto);
	}

	public MemberDTO findMemberByEmail(MemberDTO dto) {
		MemberDTO target = dao.selectMember(dto);	// userid, email
		System.out.println("이메일로 찾은 계정 : " + target);
		return target;
	}

	public String newPass(MemberDTO target) {
		String newPass = UUID.randomUUID().toString().replaceAll("-", "").substring(0, 8);
		// 새로운 UUID 생성 -> 			a124h6324-57235-lkasdgf11-12345
		// replaceAll("-", "") -> 	a124h632457235lkasdgf1112345
		// substring(0, 8) ->		a124h632
		target.setUserpw(newPass);
		int row = dao.update(target);		// 수정이 되었으면 newPass를 반환, 아니면 null을 반환
		System.out.println("수정 결과 : " + row);
		return row == 1 ? newPass : null;
	}

}
--------------------
//BookService
package com.itbank.service;

import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.book.BookDAO;
import com.itbank.book.BookDTO;

@Service
public class BookService {
	
	@Autowired private BookDAO dao;

	public List<BookDTO> getList(String order	/*, String column, String word*/) {
//		HashMap<String, String> param = new HashMap<String, String>();
//		param.put("order", order);
		return dao.selectList(order);
	}

}
----------------------
//TestDAO
package com.itbank.model;

import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository
public interface TestDAO {

	@Select("select banner from v$version")
	String selectVersion();

	
}
---------------------------
//MemberDTO
package com.itbank.member;

// LOMBOK : getter/setter/contructor/toString
public class MemberDTO {
	
	private String userid, userpw, username, email, gender;
	
	@Override
	public String toString() {
		return String.format("{%s, %s, %s, %s, %s}", userid, userpw, username, email, gender);
	}

	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getUserpw() {
		return userpw;
	}
	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
}
---------------------------
//MemberDAO
package com.itbank.member;

import java.util.List;

import org.apache.ibatis.annotations.Select;

public interface MemberDAO {

	@Select("select * from member order by userid")
	List<MemberDTO> selectList();
	
	int insert(MemberDTO dto);

	MemberDTO selectMember(MemberDTO dto);

	int update(MemberDTO target);
	
	// 어노테이션 대신 XML 설정으로 쿼리문 수행하기
	// namespace 는 패키지.인터페이스이름
	// id는 메서드이름

	// <mapper namespace="com.itbank.member.MemberDAO">
	//		<select id="selectMembmer" resultType="com.itbank.member.MemberDTO">
	//			select * from member where userid = #{userid} and userpw = #{userpw}
	//		</select>
	// </mapper>
	

}
-------------------------
//BookDTO
package com.itbank.book;

import java.sql.Date;

//  TABLE : BOOK
//	IDX			NUMBER				No	"C##ITBANK"."BOOK_SEQ"."NEXTVAL"
//	NAME		VARCHAR2(200 BYTE)	No	
//	AUTHOR		VARCHAR2(50 BYTE)	No	
//	PUBLISHER	VARCHAR2(100 BYTE)	No	
//	PUBLISHDATE	DATE				No	
//	PRICE		NUMBER				No	
//	DESCRIPTION	VARCHAR2(2000 BYTE)	No	

public class BookDTO {

	private int idx;
	private String name, author, publisher;
	private Date publishDate;
	private int price;
	private String description;
	
	public int getIdx() {
		return idx;
	}
	public void setIdx(int idx) {
		this.idx = idx;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public String getPublisher() {
		return publisher;
	}
	public void setPublisher(String publisher) {
		this.publisher = publisher;
	}
	public Date getPublishDate() {
		return publishDate;
	}
	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
}
-----------------------
//BookDAO
package com.itbank.book;

import java.util.List;

public interface BookDAO {

	List<BookDTO> selectList(String order);

}
-------------------------
//mybatis-config.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC 
	"-//mybatis.org//DTD Config 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-config.dtd">
	
<configuration>
	<settings>
		<setting name="cacheEnabled" value="false" />
		<setting name="useGeneratedKeys" value="false" />
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- 	user_name => userName	-->
	</settings>
	
	<typeAliases>
		<typeAlias type="com.itbank.member.MemberDTO" alias="member" />
		<typeAlias type="com.itbank.book.BookDTO" alias="book" />
	</typeAliases>
	
</configuration>
---------------------
//sqlmap-member.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.member.MemberDAO">

	<select id="selectMember" resultType="member" parameterType="member">
		select * from member 
			where 
				userid = #{userid} 
				<if test="userpw != null">and userpw = #{userpw}</if>
				<if test="email != null">and email = #{email}</if>
	</select>
	
	<update id="update" parameterType="member">
		update member 
			<set>
				<if test="userpw != null">userpw = #{userpw},</if>
				<if test="username != null">username = #{username},</if>
				<if test="email != null">email = #{email},</if>
				<if test="gender != null">gender = #{gender},</if>
			</set>
			where
				userid = #{userid}
	</update>
	
	<insert id="insert" parameterType="member">
		insert into member values (
			#{userid},
			#{userpw},
			#{username},
			#{email},
			#{gender}
		)
	</insert>
</mapper>
--------------------------
//sqlmap-book.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.book.BookDAO">
	
	<select id="selectList" resultType="book" parameterType="string">
		select * from book 
<!-- 			<if test="column != null and column == 'idx'"> -->
<!-- 				where -->
<!-- 			</if> -->
			order by ${order}
	</select>
	
</mapper>	
---------------------
//header.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<style>
	body {
		width: 100%;
		overflow-x: hidden;
	}
	div, span, header, nav, main, section, article, footer, aside {
		box-sizing: border-box;
	}
	a {
		text-decoration: none;
		color: inherit;
	}
	a:hover {
		text-decoration: underline;
	}
	.btn {
		display: block;
		min-width: 120px; height: 40px; line-height: 40px; text-align: center;
		background-color: darkgrey;
		color: black;
		font-size: 14px;
		font-weight: bold;
		transition-duration: 0.5s;
		border: 0;
		margin: auto;
	}
	.btn:hover {
		text-decoration: none;
		background-color: black;
		color: white;
		transition-duration: 0.5s;
	}
	.ffc, .ffw, .ffr, .jcfs, .jcce, .jcfe, .jcsb, .aifs, .aice, .aife {
		display: flex;
	}
	.ffc { flex-flow: column;}
	.ffw { flex-flow: wrap;}
	.ffr { flex-flow: row;}
	.jcfs { justify-content: flex-start;}
	.jcce { justify-content: center;}
	.jcfe { justify-content: flex-end;}
	.jcsb { justify-content: space-between;}
	.aifs { align-items: flex-start;}
	.aice { align-items: center;}
	.aife { align-items: flex-end;}
	nav > ul {
		padding: 0;
		width: 800px;
		margin: auto;
		list-style: none;
	}
	h1 {
		text-align: center;
	}
	table th {
		padding: 0;
	}
</style>
</head>
<body>
<header>
	<h1><a href="${cpath }">day07</a></h1>
	<div class="jcfe" style="padding-right: 20px; height: 20px;">
		<c:if test="${not empty login }">
		<a href="${cpath }/memberInfo">${login.userid } (${login.username })</a>
		</c:if>
	</div>
	<nav>
		<ul class="ffr jcce">
			<c:if test="${empty login }">
				<li><a class="btn" href="${cpath }/login">로그인</a></li>
			</c:if>
			<c:if test="${not empty login }">
				<li><a class="btn" href="${cpath }/logout">로그아웃</a></li>
			</c:if>
			<li><a class="btn" href="${cpath }/bookList">도서 관리</a></li>
		</ul>
	</nav>
</header>

-------------------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>대문 페이지</h2>


</body>
</html>
--------------------------
//bookList.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>도서 목록</h2>

<div style="margin: 20px 0;">
	<form>
		<select name="column">
			<option value="idx">도서 번호로 검색</option>
			<option value="name">도서명으로 검색</option>
			<option value="author">저자명으로 검색</option>
		</select>
		<input type="search" name="word" placeholder="검색어를 입력하세요">
		<input type="submit" value="검색">
	</form>
</div>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th><a class="btn" href="${cpath }/bookList/idx">IDX</a></th>
		<th><a class="btn" href="${cpath }/bookList/name">NAME</a></th>
		<th><a class="btn" href="${cpath }/bookList/author">AUTHOR</a></th>
		<th><a class="btn" href="${cpath }/bookList/publisher">PUBLISHER</a></th>
		<th><a class="btn" href="${cpath }/bookList/publishDate">PUBLISHDATE</a></th>
		<th><a class="btn" href="${cpath }/bookList/price">PRICE</a></th>
		<th><a class="btn" href="${cpath }/bookList/description">DESCRIPTION</a></th>
	</tr>
	<c:forEach var="dto" items="${list }">
	<tr>
		<td>${dto.idx }</td>
		<td>${dto.name }</td>
		<td>${dto.author }</td>
		<td>${dto.publisher }</td>
		<td>${dto.publishDate }</td>
		<td>${dto.price }</td>
		<td>${dto.description }</td>
	</tr>
	</c:forEach>
</table>

</body>
</html>
---------------------------
//alert.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<div id="alert" class="jcce aice ffc" 
	 style="border: 2px solid black;
	        box-shadow: 5px 5px grey;
	        width: 500px;
	        height: 300px;
	        margin: 50px auto;
	        border-radius: 25px;
	        
	        opacity: 0;
	        position: absolute;
	        top: 50%;
	        transition-duration: 1.5s">
	<div style="font-size: 16px; font-weight: bold; margin: 30px;">
		${msg }
	</div>
	<button class="btn">확인</button>
</div>

<script>
	const cpath = '${cpath}'
	const msg = '${msg}'
	const url = '${url}'
	const alert = document.getElementById('alert')
	
	const clientWidth = document.body.clientWidth
	const alertWidth = alert.clientWidth
	const left = (clientWidth / 2) - (alertWidth / 2)
	
	window.onload = function(event) {
		alert.style.left = left + 'px'
		console.log('onload !!')
		alert.style.opacity = 1;
		alert.style.top = '30%'
	}
	document.querySelector('button').onclick = function() {
		if(url == '') {
	 		history.go(-1);
	 	}
	 	else {
	 		location.href = cpath + '/' + url
	 	}
	}
	
// 	alert(msg)
// 	if(url == '') {
// 		history.go(-1);
// 	}
// 	else {
// 		location.href = cpath + '/' + url
// 	}
</script>

</body>
</html>
-----------------------------
//Join.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>회원 가입</h2>
<!-- 
		회원 가입 코드를 직접 구현하고, myBatis에서는 xml을 활용하여 처리해보세요
		가입을 처리한 이후 로그인 페이지로 리다이렉트 하세요
 -->
<div class="jcce">
<form method="POST">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="text" name="username" placeholder="Name" required></p>
	<p><input type="text" name="email" placeholder="E-mail" required></p>
	<p>
		<label><input type="radio" name="gender" value="남성" required>남성</label>
		<label><input type="radio" name="gender" value="여성" required>여성</label>
	</p>
	<p><input type="submit" value="가입"></p>
</form>
</div>

</body>
</html>
------------------------------
//login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>로그인</h2>
<hr>
<form method="POST" class="ffc aice jcfs">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="submit"></p>
</form>

<div class="jcce">
	<a href="${cpath }/join">아직 회원이 아니십니까?</a>&nbsp; &nbsp;
	<a href="${cpath }/newPass">비밀번호를 분실했습니다</a>
</div>

</body>
</html>
--------------------------------
//memberList.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>회원 목록</h2>
<hr>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th>userid</th>
		<th>userpw</th>
		<th>username</th>
		<th>email</th>
		<th>gender</th>
	</tr>
	<c:forEach var="member" items="${list }">
	<tr>
		<td>${member.userid }</td>
		<td>${member.userpw }</td>
		<td>${member.username }</td>
		<td>${member.email }</td>
		<td>${member.gender }</td>
	</tr>
	</c:forEach>
</table>

</body>
</html>
----------------------------
//newPass.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>비밀번호 재발급</h2>

<div class="jcce">
	<h4>비밀번호를 재발급할 계정의 ID와 Email을 입력하여 인증을 진행해주세요</h4>
</div>

<div class="jcce">
	<form method="POST">
		<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
		<p><input type="email" name="email" placeholder="foo@bar.com" required></p>
		<p><input class="btn" type="submit" value="재발급신청"></p>
	</form>
</div>

</body>
</html>
=========================================================================
//root-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
			Connection을 관리해주는 dataSource는 hikariCP로 처리하고,
			DB에 접속 및 쿼리문 수행, 객체-관계 맵핑은 myBatis 로 처리한다
	 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<!--커넥션관리-->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- myBatis 에서 xml형식의 mapper 파일을 작성할때 사용하는 설정 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
		
		<!-- mapper 파일의 경로를 리스트 형식으로 작성 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:config/sqlmap-member.xml</value>
				<value>classpath:config/sqlmap-book.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<context:component-scan base-package="com.itbank.member" />
	
	<mybatis-spring:scan base-package="com.itbank.model" /><!-- interface만 -->
	<mybatis-spring:scan base-package="com.itbank.member" />
	<mybatis-spring:scan base-package="com.itbank.book" />
		
</beans>
-------------------
//servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<interceptors>		<!-- 인터셉터들을 여기서 선언합니다 -->
		<interceptor>	<!-- 그중 첫번째 -->
<!-- 			<mapping path="/addBook" />	이 주소로 접근하면 -->
<!-- 			<mapping path="/modifyBook/**" /> -->
<!-- 			<mapping path="/deleteBook/**" /> -->

			<mapping path="/**" />					<!-- 모든 경로를 인터셉터 대상에 포함시키고 -->			
			<exclude-mapping path="/"/>				<!-- 대문페이지 -->
			<exclude-mapping path="/login"/>		<!-- 로그인 페이지 -->
			<exclude-mapping path="/resources/**"/>	<!-- 정적 자원에 대한 요청 -->
			<exclude-mapping path="/bookList/**"/>	<!-- 도서 목록만 제외시킵니다 -->
			
			<!-- 아래에 있는 인터셉터가 작동합니다 -->
			<beans:bean id="loginIntercepter" class="com.itbank.intercepter.LoginIntercepter" />
		</interceptor>
	</interceptors>
	
	<context:component-scan base-package="com.itbank.controller" />
	
</beans:beans> */
-------------------------
//LoginIntercepter.java
package com.itbank.intercepter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.itbank.member.MemberDTO;

public class LoginIntercepter extends HandlerInterceptorAdapter {

	// Menu - Source - Override/Implement method
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		// Handle : 컨트롤러가 요청을 처리하는 작업을 말한다
		// preHandler : 요청이 컨트롤러에 도달하기 전에 사전 작업하는 내용
		
		HttpSession session = request.getSession();
		MemberDTO login = (MemberDTO) session.getAttribute("login");
		System.out.print("1) ");
		System.out.println(login != null ? "로그인 사용자 : " + login.getUserid() : "로그인 없음" );
		
		if(login != null) {
			return true;
		}
//		response.getWriter().println("로그인 객체가 없어서 다른 처리를 해야 합니다");
		response.sendRedirect(request.getContextPath() + "/login");
		return false;	// 반환값에 따라서 기존 요청에 대한 처리를 그대로 진행하거나	true
						// 혹은 진행을 중단하고 새로운 응답을 만들어서 보낸다		false
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {

	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {

	}
-----------------------
//HomeController
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.service.TestService;

@Controller
public class HomeController {
	
	@Autowired private TestService ts;

	@RequestMapping("/")
	public ModelAndView home() {
		ModelAndView mav = new ModelAndView("home");
		String test = ts.getTest();
		mav.addObject("test", test);
		return mav;
	}
}
---------------------
//BookController
package com.itbank.controller;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.book.BookDTO;
import com.itbank.service.BookService;

@Controller
public class BookController {

	@Autowired private BookService bs;
	
	@GetMapping("/bookList")
	public String bookList() {
		return "redirect:/bookList/idx";
	}
	
	@GetMapping("/bookList/{order}")
	public ModelAndView bookList(@RequestParam HashMap<String, String> map,
								 @PathVariable String order) {
		ModelAndView mav = new ModelAndView("bookList");
		
		map.put("order", order);
//		System.out.println("map : " + map);
//		HashMap을 이용하여 parameter를 받을 때는 어노테이션 @RequestParam을 생략하면 안된다
		
		List<BookDTO> list = bs.getList(map);
		mav.addObject("list", list);
		return mav;
	}
	
	@GetMapping("/deleteBook/{idx}")	
	public ModelAndView deleteBook(@PathVariable int idx) {
		
		ModelAndView mav = new ModelAndView("alert");
		int row = bs.deleteBook(idx);

		if(row == 1) {
			mav.addObject("msg", idx + "번 도서정보가 삭제되었습니다");
			mav.addObject("url", "bookList");
		}
		else {
			mav.addObject("msg", "삭제가 처리되지 않았습니다");
			// url을 지정하지 않으면 history.go(-1) 로 이전 페이지로 이동하도록
		}
		return mav;
	}
	
	@GetMapping("/modifyBook/{idx}")
	public ModelAndView modify(@PathVariable int idx) {
		ModelAndView mav = new ModelAndView("modifyBook");
		BookDTO dto = bs.select(idx);	// 객체 하나의 정보를 불러와서
		mav.addObject("dto", dto);		// 넘겨주고, jsp에서 form 태그의 value값으로 활용한다
		return mav;
	}
	
	@PostMapping("/modifyBook/{idx}")
	public ModelAndView modify(BookDTO dto) {	// 사용자가 수정 이후 제출한 데이터를 dto로 받는다
		ModelAndView mav = new ModelAndView("alert");
		System.out.println("수정 도서의 번호 : " + dto.getIdx());
		int row = bs.modify(dto);
		if(row == 1) {
			mav.addObject("msg", "수정 성공 !!");
			mav.addObject("url", "bookList");
		}
		else {
			mav.addObject("msg", "수정 실패 !!");
		}
		return mav;
	}
	
	@GetMapping("/addBook")
	public void addBook() {
		System.out.println("2) 컨트롤러");
	}
	
	@PostMapping("/addBook")
	public ModelAndView addBook(BookDTO dto) {
		ModelAndView mav = new ModelAndView("alert");
		int row = bs.insert(dto);
		mav.addObject("msg", row == 1 ? "추가 성공" : "추가 실패");
		mav.addObject("url", row == 1 ? "bookList" : "");
		return mav;
	}
}
----------------------
//MemberController
package com.itbank.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.member.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class MemberController {
	
	@Autowired private MemberService ms;

	@GetMapping("/memberList")
	public ModelAndView memberList() {
		ModelAndView mav = new ModelAndView();
		List<MemberDTO> list = ms.getMemberList();
		mav.addObject("list", list);
		return mav;
	}
	
	@GetMapping("/join")
	public void join() {}
	
	@PostMapping("/join")
	public String join(MemberDTO dto) {
		int row = ms.join(dto);
		System.out.println(row == 1 ? "가입 성공" : "가입 실패");
		return "redirect:/login";
	}
	
	@GetMapping("/login") 
	public void login() {}
	
	@PostMapping("/login")
	public String login(MemberDTO dto, HttpSession session) {
		MemberDTO login = ms.login(dto);		// DB에서 받아온 계정을
		session.setAttribute("login", login);	// 현재 세션에 저장
		System.out.println(login == null ? "실패" : "성공 : " + login.getUserid());
		return "redirect:/";
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/";
	}
	
	@GetMapping("/newPass")
	public void newPass() {}
	
	@PostMapping("/newPass")
	public ModelAndView newPass(MemberDTO dto) {
		ModelAndView mav = new ModelAndView("alert");
		
		// ID와 Email이 일치하는 계정이 있는가
		MemberDTO target = ms.findMemberByEmail(dto);
		
		if(target != null) {
			// 계정이 있으면, 새로 문자열을 만들어서 update 하고
			String newPass = ms.newPass(target);
			
			// 사용자에게 신규 비밀번호를 alert을 통해서 알려주기
			// 로그인 페이지로 이동
			mav.addObject("msg", "변경된 비밀번호는 [" + newPass + "] 입니다");
			mav.addObject("url", "/login");
		}
		else {
			// 일치하는 계정이 없다는 메시지를 alert을 통해서 알려주기
			// 이전페이지로 이동
			mav.addObject("msg", "입력한 정보와 일치하는 계정이 없습니다");
		}
		return mav;
	}
	
	@ExceptionHandler(DuplicateKeyException.class)	// PK나 UK가 중복되어 발생하는 예외
	public ModelAndView duplicateJoin(DuplicateKeyException e) {
		ModelAndView mav = new ModelAndView("alert");
		mav.addObject("msg", "이미 사용중인 ID입니다. 다른 ID로 가입을 시도해 주세요");
		return mav;
	}
}
----------------------
//TestService
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.TestDAO;

@Service
public class TestService {
	
	@Autowired private TestDAO dao;

	public String getTest() {
//		return "서현씨 다 됐나요?";
		return dao.selectVersion();
	}

}
----------------------
//BookService
package com.itbank.service;

import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.book.BookDAO;
import com.itbank.book.BookDTO;

@Service
public class BookService {
	
	@Autowired private BookDAO dao;

	public List<BookDTO> getList(HashMap<String, String> map) {
		return dao.selectList(map);
	}

	public int deleteBook(int idx) {
		return dao.delete(idx);
	}

	public BookDTO select(int idx) {
		return dao.select(idx);
	}

	public int modify(BookDTO dto) {
		return dao.update(dto);
	}

	public int insert(BookDTO dto) {
		return dao.insert(dto);
	}

}
-----------------
//MemberService
package com.itbank.service;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.member.MemberDAO;
import com.itbank.member.MemberDTO;

@Service
public class MemberService {

	@Autowired private MemberDAO dao;
	
	public List<MemberDTO> getMemberList() {
		List<MemberDTO> list = dao.selectList();
		
		// 리스트 내부의 각 객체에 대해서, 비밀번호의 첫글자를 제외한 나머지를 *로 변경하여 반환
		for(MemberDTO dto : list) {
			String pass = dto.getUserpw();
			String newPass = pass.charAt(0) + "";
			for(int i = 0; i < pass.length() - 1; i++) {
				newPass += "*";
			}
			dto.setUserpw(newPass);
		}
		return list;
	}

	public MemberDTO login(MemberDTO dto) {
		MemberDTO login = dao.selectMember(dto);	// userid, userpw
		System.out.println("비밀번호로 찾은 계정 : " + login);
		return login;
	}

	public int join(MemberDTO dto) {
		return dao.insert(dto);
	}

	public MemberDTO findMemberByEmail(MemberDTO dto) {
		MemberDTO target = dao.selectMember(dto);	// userid, email
		System.out.println("이메일로 찾은 계정 : " + target);
		return target;
	}

	public String newPass(MemberDTO target) {
		String newPass = UUID.randomUUID().toString().replaceAll("-", "").substring(0, 8);
		// 새로운 UUID 생성 -> 			a124h6324-57235-lkasdgf11-12345
		// replaceAll("-", "") -> 	a124h632457235lkasdgf1112345
		// substring(0, 8) ->		a124h632
		target.setUserpw(newPass);
		int row = dao.update(target);		// 수정이 되었으면 newPass를 반환, 아니면 null을 반환
		System.out.println("수정 결과 : " + row);
		return row == 1 ? newPass : null;
	}

}
---------------------
//TestDAO
package com.itbank.model;

import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository
public interface TestDAO {

	@Select("select banner from v$version")
	String selectVersion();

	
}
---------------------
//MemberDTO
package com.itbank.member;

// LOMBOK : getter/setter/contructor/toString
public class MemberDTO {
	
	private String userid, userpw, username, email, gender;
	
	@Override
	public String toString() {
		return String.format("{%s, %s, %s, %s, %s}", userid, userpw, username, email, gender);
	}

	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getUserpw() {
		return userpw;
	}
	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	
	

}
------------------------
//MemberDAO

package com.itbank.member;

import java.util.List;

import org.apache.ibatis.annotations.Select;

public interface MemberDAO {

	@Select("select * from member order by userid")
	List<MemberDTO> selectList();
	
	int insert(MemberDTO dto);

	MemberDTO selectMember(MemberDTO dto);

	int update(MemberDTO target);
	
	// 어노테이션 대신 XML 설정으로 쿼리문 수행하기
	// namespace 는 패키지.인터페이스이름
	// id는 메서드이름

	// <mapper namespace="com.itbank.member.MemberDAO">
	//		<select id="selectMembmer" resultType="com.itbank.member.MemberDTO">
	//			select * from member where userid = #{userid} and userpw = #{userpw}
	//		</select>
	// </mapper>
	

}
------------------------------
//BookDTO
package com.itbank.book;

import java.sql.Date;

//  TABLE : BOOK
//	IDX			NUMBER				No	"C##ITBANK"."BOOK_SEQ"."NEXTVAL"
//	NAME		VARCHAR2(200 BYTE)	No	
//	AUTHOR		VARCHAR2(50 BYTE)	No	
//	PUBLISHER	VARCHAR2(100 BYTE)	No	
//	PUBLISHDATE	DATE				No	
//	PRICE		NUMBER				No	
//	DESCRIPTION	VARCHAR2(2000 BYTE)	No	

public class BookDTO {

	private int idx;
	private String name, author, publisher;
	private Date publishDate;
	private int price;
	private String description;
	
	public int getIdx() {
		return idx;
	}
	public void setIdx(int idx) {
		this.idx = idx;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public String getPublisher() {
		return publisher;
	}
	public void setPublisher(String publisher) {
		this.publisher = publisher;
	}
	public Date getPublishDate() {
		return publishDate;
	}
	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
}
------------------------
//BookDAO
package com.itbank.book;

import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Select;

public interface BookDAO {

	List<BookDTO> selectList(HashMap<String, String> map);

	@Delete("delete book where idx=#{idx}")
	int delete(int idx);

	@Select("select * from book where idx=#{idx}")
	BookDTO select(int idx);

	int update(BookDTO dto);

	int insert(BookDTO dto);

}
-----------------------------
//mybatis-config.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC 
	"-//mybatis.org//DTD Config 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-config.dtd">
	
<configuration>
	<settings>
		<setting name="cacheEnabled" value="false" />
		<setting name="useGeneratedKeys" value="false" />
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- 	user_name => userName	-->
	</settings>
	
	<typeAliases>
		<typeAlias type="com.itbank.member.MemberDTO" alias="member" />
		<typeAlias type="com.itbank.book.BookDTO" alias="book" />
	</typeAliases>
	
</configuration>
--------------------------------
//sqlmap-book.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.book.BookDAO">
	
	<select id="selectList" resultType="book" parameterType="hashmap">
		select * from book
		<if test="column != null">
			<choose>
				<when test="column == 'idx'">
					where ${column} = #{search}
				</when>
				<when test="column == 'name' or column == 'author'">
					where ${column} like '%'||#{search}||'%'
				</when>
			</choose>
		</if> 
			order by ${order}
	</select>
	
	<update id="update" parameterType="book">
		update book
			<set>
				<if test="name != null">name = #{name},</if>
				<if test="author != null">author = #{author},</if>
				<if test="publisher != null">publisher = #{publisher},</if>
				<if test="publishDate != null">publishDate = #{publishDate},</if>
				<if test="price != null">price = #{price},</if>
				<if test="description != null">description = #{description},</if>
			</set>
			where
				idx = #{idx}
	</update>
	
	<insert id="insert" parameterType="book">
		insert into book values (
			book_seq.nextval,
			#{name}, #{author}, #{publisher}, #{publishDate}, #{price}, #{description}		
		)
	</insert>
	
</mapper>	
--------------------------
//sqlmap-memeber.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.member.MemberDAO">

	<select id="selectMember" resultType="member" parameterType="member">
		select * from member 
			where 
				userid = #{userid} 
				<if test="userpw != null">and userpw = #{userpw}</if>
				<if test="email != null">and email = #{email}</if>
	</select>
	
	<update id="update" parameterType="member">
		update member 
			<set>
				<if test="userpw != null">userpw = #{userpw},</if>
				<if test="username != null">username = #{username},</if>
				<if test="email != null">email = #{email},</if>
				<if test="gender != null">gender = #{gender},</if>
			</set>
			where
				userid = #{userid}
	</update>
	
	<insert id="insert" parameterType="member">
		insert into member values (
			#{userid},
			#{userpw},
			#{username},
			#{email},
			#{gender}
		)
	</insert>
</mapper>
------------------------
//header.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<link rel="stylesheet" type="text/css" href="${cpath }/resources/css/style.css">
</head>
<body>
<header>
	<h1><a href="${cpath }">day08</a></h1>
	<div class="jcfe" style="padding-right: 20px; height: 20px;">
		<c:if test="${not empty login }">
		<a href="${cpath }/memberInfo">${login.userid } (${login.username })</a>
		</c:if>
	</div>
	<nav>
		<ul class="ffr jcce">
			<c:if test="${empty login }">
				<li><a class="btn" href="${cpath }/login">로그인</a></li>
			</c:if>
			<c:if test="${not empty login }">
				<li><a class="btn" href="${cpath }/logout">로그아웃</a></li>
			</c:if>
			<li><a class="btn" href="${cpath }/bookList">도서 관리</a></li>
		</ul>
	</nav>
</header>
---------------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>대문 페이지</h2>


</body>
</html>
-----------------------
//alert.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<div id="alert" class="jcce aice ffc" 
	 style="border: 2px solid black;
	        box-shadow: 5px 5px grey;
	        width: 500px;
	        height: 300px;
	        margin: 50px auto;
	        border-radius: 25px;
	        
	        opacity: 0;
	        position: absolute;
	        top: 50%;
	        transition-duration: 1.5s">
	<div style="font-size: 16px; font-weight: bold; margin: 30px;">
		${msg }
	</div>
	<button class="btn">확인</button>
</div>

<script>
	const cpath = '${cpath}'
	const msg = '${msg}'
	const url = '${url}'
	const alert = document.getElementById('alert')
	
	const clientWidth = document.body.clientWidth   //clientWidth는 margin을 제외한 padding,border,content까지 포함한 크기
	const alertWidth = alert.clientWidth 
	const left = (clientWidth / 2) - (alertWidth / 2)
	
	window.onload = function(event) {
		alert.style.left = left + 'px'
		console.log('onload !!')
		alert.style.opacity = 1;
		alert.style.top = '30%'
	}
	document.querySelector('button').onclick = function() {
		if(url == '') {
	 		history.go(-1);
	 	}
	 	else {
	 		location.href = cpath + '/' + url
	 	}
	}
	
// 	alert(msg)
// 	if(url == '') {
// 		history.go(-1);
// 	}
// 	else {
// 		location.href = cpath + '/' + url
// 	}
</script>

</body>
</html>
------------------------
//login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>로그인</h2>
<hr>
<form method="POST" class="ffc aice jcfs">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="submit"></p>
</form>

<div class="jcce">
	<a href="${cpath }/join">아직 회원이 아니십니까?</a>&nbsp; &nbsp;
	<a href="${cpath }/newPass">비밀번호를 분실했습니다</a>
</div>

</body>
</html>
----------------------
//join.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>회원 가입</h2>
<!-- 
		회원 가입 코드를 직접 구현하고, myBatis에서는 xml을 활용하여 처리해보세요
		가입을 처리한 이후 로그인 페이지로 리다이렉트 하세요
 -->
<div class="jcce">
<form method="POST">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="text" name="username" placeholder="Name" required></p>
	<p><input type="text" name="email" placeholder="E-mail" required></p>
	<p>
		<label><input type="radio" name="gender" value="남성" required>남성</label>
		<label><input type="radio" name="gender" value="여성" required>여성</label>
	</p>
	<p><input type="submit" value="가입"></p>
</form>
</div>

</body>
</html>
----------------------
//newPass.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>비밀번호 재발급</h2>

<div class="jcce">
	<h4>비밀번호를 재발급할 계정의 ID와 Email을 입력하여 인증을 진행해주세요</h4>
</div>

<div class="jcce">
	<form method="POST">
		<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
		<p><input type="email" name="email" placeholder="foo@bar.com" required></p>
		<p><input class="btn" type="submit" value="재발급신청"></p>
	</form>
</div>

</body>
</html>
------------------------
//memberList.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>회원 목록</h2>
<hr>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th>userid</th>
		<th>userpw</th>
		<th>username</th>
		<th>email</th>
		<th>gender</th>
	</tr>
	<c:forEach var="member" items="${list }">
	<tr>
		<td>${member.userid }</td>
		<td>${member.userpw }</td>
		<td>${member.username }</td>
		<td>${member.email }</td>
		<td>${member.gender }</td>
	</tr>
	</c:forEach>
</table>

</body>
</html>
-----------------------
//bookList.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>도서 목록</h2>

<div class="jcsb" style="margin: 20px 0; max-width: 1550px;">
	<div>
		<form>
			<select name="column">
				<option value="idx" ${param.column eq 'idx' ? 'selected' : '' }>도서 번호로 검색</option>
				<option value="name" ${param.column eq 'name' ? 'selected' : '' }>도서명으로 검색</option>
				<option value="author" ${param.column eq 'author' ? 'selected' : '' }>저자명으로 검색</option>
			</select>
			<input type="search" name="search" placeholder="검색어를 입력하세요" value="${param.search }">
			<input type="submit" value="검색">
		</form>
	</div>
	
	<div style="margin: 0 10px;">
		<a href="${cpath }/addBook"><button>추가</button></a>
	</div>
</div>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th><a class="btn" href="${cpath }/bookList/idx">IDX</a></th>
		<th><a class="btn" href="${cpath }/bookList/name">NAME</a></th>
		<th><a class="btn" href="${cpath }/bookList/author">AUTHOR</a></th>
		<th><a class="btn" href="${cpath }/bookList/publisher">PUBLISHER</a></th>
		<th><a class="btn" href="${cpath }/bookList/publishDate">PUBLISHDATE</a></th>
		<th><a class="btn" href="${cpath }/bookList/price">PRICE</a></th>
		<th><a class="btn" href="${cpath }/bookList/description">DESCRIPTION</a></th>
		<th>수정</th>
		<th>삭제</th>
	</tr>
	<c:forEach var="dto" items="${list }">
	<tr>
		<td>${dto.idx }</td>
		<td>${dto.name }</td>
		<td>${dto.author }</td>
		<td>${dto.publisher }</td>
		<td>${dto.publishDate }</td>
		<td>${dto.price }</td>
		<td>${dto.description }</td>
		<td><button class="modifyBtn" data-idx="${dto.idx }">수정</button></td>
		<td><button class="deleteBtn" data-idx="${dto.idx }">삭제</button></td>
	</tr>
	</c:forEach>
</table>

<script>
	const cpath = '${cpath}'
	const modifyBtnList = document.querySelectorAll('.modifyBtn')
	const deleteBtnList = document.querySelectorAll('.deleteBtn')
	
	// 삭제 버튼을 클릭하면 실행되는 함수를 작성
	deleteBtnList.forEach(function(btn) {	// 리스트 내부의 각각의 버튼을 btn이라고 할때
		btn.onclick = function(event) {		// btn을 클릭하면 실행되는 이벤트 함수의 내용
			const idx = event.target.dataset.idx	// 태그에서 data-idx 속성을 불러와서 변수에 저장
			if(confirm('정말 ' + idx + '번 도서를 삭제하시겠습니까?')) {		// 사용자가 확인을 클릭하면
				location.href = cpath + '/' + 'deleteBook/' + idx 	// 삭제 페이지로 이동
			}
		}
	})
	
	// 수정 버튼을 클릭하면 실행되는 함수를 작성
	for(let i = 0; i < modifyBtnList.length; i++) {
		const btn = modifyBtnList[i]
		btn.onclick = function(event) {
			const idx = event.target.dataset.idx
			location.href = cpath + '/' + 'modifyBook/' + idx 	
		}
	}
	
</script>

</body>
</html>
--------------------------
//addBook.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>도서 추가</h2>

<form method="POST">
	<p><input type="text" name="name" placeholder="도서명" required autofocus></p>
	<p><input type="text" name="author" placeholder="저자명" required></p>
	<p><input type="text" name="publisher" placeholder="출판사" required></p>
	<p><input type="date" name="publishDate" required></p>
	<p><input type="number" step="100" name="price" placeholder="가격" required></p>
	<p>
		<textarea name="description" placeholder="도서 설명" required></textarea>
	</p>
	<p><input type="submit" value="추가"></p>
</form>	

<script>
	const today = new Date().toISOString().split('T')[0]
	console.log(today)
	
	document.querySelector('input[type="date"]').value = today
</script>

</body>
</html>
----------------------
//modifyBook.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>도서 정보 수정 : ${dto.idx }번 도서</h2>

<form method="POST">
	<p><input type="text" name="name" value="${dto.name }" required autofocus></p>
	<p><input type="text" name="author" value="${dto.author }" required></p>
	<p><input type="text" name="publisher" value="${dto.publisher }" required></p>
	<p><input type="date" name="publishDate" value="${dto.publishDate }" required></p>
	<p><input type="number" step="100" name="price" value="${dto.price }" required></p>
	<p>
		<textarea name="description" required>${dto.description }</textarea>
	</p>
	<p><input type="submit" value="수정"></p>
</form>	

</body>
</html>
===================================================================
//day09

#)rootcontext.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
			Connection을 관리해주는 dataSource는 hikariCP로 처리하고,
			DB에 접속 및 쿼리문 수행, 객체-관계 맵핑은 myBatis 로 처리한다
	 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- myBatis 에서 xml형식의 mapper 파일을 작성할때 사용하는 설정 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
		
		<!-- mapper 파일의 경로를 리스트 형식으로 작성 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:config/sqlmap-member.xml</value>
				<value>classpath:config/sqlmap-book.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<context:component-scan base-package="com.itbank.member" />
	
	<mybatis-spring:scan base-package="com.itbank.model" /><!-- interface만 -->
	<mybatis-spring:scan base-package="com.itbank.member" />
	<mybatis-spring:scan base-package="com.itbank.book" />
		
</beans>
---------------------------
#)servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources // by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<interceptors>		<!-- 인터셉터들을 여기서 선언합니다 -->
		<interceptor>	<!-- 그중 첫번째 -->
<!-- 			<mapping path="/addBook" />	이 주소로 접근하면 -->
<!-- 			<mapping path="/modifyBook/**" /> -->
<!-- 			<mapping path="/deleteBook/**" /> -->

			<mapping path="/**" />					<!-- 모든 경로를 인터셉터 대상에 포함시키고 -->			
			<exclude-mapping path="/"/>				<!-- 대문페이지 -->
			<exclude-mapping path="/login"/>		<!-- 로그인 페이지 -->
			<exclude-mapping path="/join"/>			<!-- 회원가입 페이지 -->
			<exclude-mapping path="/newPass"/>		<!-- 비밀번호 재발급 페이지 -->
			<exclude-mapping path="/resources/**"/>	<!-- 정적 자원에 대한 요청 -->
			<exclude-mapping path="/bookList/**"/>	<!-- 도서 목록만 제외시킵니다 -->
			
			<!-- 아래에 있는 인터셉터가 작동합니다 -->
			<beans:bean id="loginIntercepter" class="com.itbank.intercepter.LoginIntercepter" />
		</interceptor>
	</interceptors>
	
	<context:component-scan base-package="com.itbank.controller" />
	
</beans:beans>
-----------------------------------
#)resources/mybatis-config.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC 
	"-//mybatis.org//DTD Config 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-config.dtd">
	
<configuration>
	<settings>
		<setting name="cacheEnabled" value="false" />
		<setting name="useGeneratedKeys" value="false" />
		<setting name="mapUnderscoreToCamelCase" value="false" />
		<!-- 	user_name => userName	-->
	</settings>
	
	<typeAliases>
		<typeAlias type="com.itbank.member.MemberDTO" alias="member" />
		<typeAlias type="com.itbank.book.BookDTO" alias="book" />
	</typeAliases>
	
</configuration>
------------------------
#)sqlmap-book.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.book.BookDAO">
	
	<select id="selectList" resultType="book" parameterType="hashmap">
		select * from book
		<if test="column != null">
			<choose>
				<when test="column == 'idx'">
					where ${column} = #{search}
				</when>
				<when test="column == 'name' or column == 'author'">
					where ${column} like '%'||#{search}||'%'
				</when>
			</choose>
		</if> 
			order by ${order}
	</select>
	
	<update id="update" parameterType="book">
		update book
			<set>
				<if test="name != null">name = #{name},</if>
				<if test="author != null">author = #{author},</if>
				<if test="publisher != null">publisher = #{publisher},</if>
				<if test="publishDate != null">publishDate = #{publishDate},</if>
				<if test="price != null">price = #{price},</if>
				<if test="description != null">description = #{description},</if>
			</set>
			where
				idx = #{idx}
	</update>
	
	<insert id="insert" parameterType="book">
		insert into book values (
			book_seq.nextval,
			#{name}, #{author}, #{publisher}, #{publishDate}, #{price}, #{description}		
		)
	</insert>
	
</mapper>	
--------------------------
#)sqlmap-member.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
	"-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.itbank.member.MemberDAO">

	<select id="selectMember" resultType="member" parameterType="member">
		select * from member 
			where 
				userid = #{userid} 
				<if test="userpw != null">and userpw = #{userpw}</if>
				<if test="email != null">and email = #{email}</if>
	</select>
	
	<update id="update" parameterType="member">
		update member 
			<set>
				<if test="userpw != null">userpw = #{userpw},</if>
				<if test="username != null">username = #{username},</if>
				<if test="email != null">email = #{email},</if>
				<if test="gender != null">gender = #{gender},</if>
			</set>
			where
				userid = #{userid}
	</update>
	
	<insert id="insert" parameterType="member">
		insert into member values (
			#{userid},
			#{userpw},
			#{username},
			#{email},
			#{gender}
		)
	</insert>
</mapper>
-------------------------
#)BookDTO
package com.itbank.book;

import java.sql.Date;

//  TABLE : BOOK
//	IDX			NUMBER				No	"C##ITBANK"."BOOK_SEQ"."NEXTVAL"
//	NAME		VARCHAR2(200 BYTE)	No	
//	AUTHOR		VARCHAR2(50 BYTE)	No	
//	PUBLISHER	VARCHAR2(100 BYTE)	No	
//	PUBLISHDATE	DATE				No	
//	PRICE		NUMBER				No	
//	DESCRIPTION	VARCHAR2(2000 BYTE)	No	

public class BookDTO {

	private int idx;
	private String name, author, publisher;
	private Date publishDate;
	private int price;
	private String description;
	
	public int getIdx() {
		return idx;
	}
	public void setIdx(int idx) {
		this.idx = idx;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAuthor() {
		return author;
	}
	public void setAuthor(String author) {
		this.author = author;
	}
	public String getPublisher() {
		return publisher;
	}
	public void setPublisher(String publisher) {
		this.publisher = publisher;
	}
	public Date getPublishDate() {
		return publishDate;
	}
	public void setPublishDate(Date publishDate) {
		this.publishDate = publishDate;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
}
-------------------------------
#)BookDAO
package com.itbank.book;

import java.util.HashMap;
import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Select;

public interface BookDAO {

	List<BookDTO> selectList(HashMap<String, String> map);

	@Delete("delete book where idx=#{idx}")
	int delete(int idx);

	@Select("select * from book where idx=#{idx}")
	BookDTO select(int idx);

	int update(BookDTO dto);

	int insert(BookDTO dto);

}
--------------------------------
#)MemberController.java
package com.itbank.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.member.MemberDTO;
import com.itbank.service.MemberService;

@Controller
public class MemberController {
	
	@Autowired private MemberService ms;

	@GetMapping("/memberList")
	public ModelAndView memberList() {
		ModelAndView mav = new ModelAndView();
		List<MemberDTO> list = ms.getMemberList();
		mav.addObject("list", list);
		return mav;
	}
	
	@GetMapping("/join")
	public void join() {}
	
	@PostMapping("/join")
	public String join(MemberDTO dto) {
		int row = ms.join(dto);
		System.out.println(row == 1 ? "가입 성공" : "가입 실패");
		return "redirect:/login";
	}
	
	@GetMapping("/login") 
	public void login() {}
	
	@PostMapping("/login")	// POST라도 주소창에 쿼리스트링이 있으면 파라미터 형식으로 받을 수 있다 !!
	public String login(MemberDTO dto, HttpSession session, String url) {
		System.out.println("컨트롤러에서 받은 주소 : " + url);
		
		MemberDTO login = ms.login(dto);		// DB에서 받아온 계정을
		session.setAttribute("login", login);	// 현재 세션에 저장
		System.out.println(login == null ? "실패" : "성공 : " + login.getUserid());
		
		// 요청받은 주소가 별도로 있으면, 그 주소로 이동시키고 아니면 대문페이지로 이동시킨다
		return (url == null) ? "redirect:/" : "redirect:" + url;
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/";
	}
	
	@GetMapping("/memberInfo")
	public ModelAndView memberInfo(HttpSession session) {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("memberInfo"); 	// 생성자 매개변수로 넣지 않는다면 setter를 활용할수 있다
		
		MemberDTO login = (MemberDTO)session.getAttribute("login");
		MemberDTO info = ms.login(login);	// 차후 보안요소를 생각한다면, 비번을 한번 더 입력받는 것이 맞다
		mav.addObject("info", info);
		
		return mav;
	}
	
	@GetMapping("/memberUpdate")
	public ModelAndView memberUpdate(HttpSession session) {
		ModelAndView mav = new ModelAndView();
		
		MemberDTO login = (MemberDTO) session.getAttribute("login");
		MemberDTO info = ms.login(login);
		mav.addObject("info", info);
		return mav;
	}
	
	@PostMapping("/memberUpdate")
	public ModelAndView memberUpdate(MemberDTO dto, HttpSession session) {
		int row = ms.update(dto);
		ModelAndView mav = new ModelAndView("alert");
		mav.addObject("msg", row == 1 ? "수정 성공" : "수정 실패");
		mav.addObject("url", row == 1 ? "login" : "");
		if(row == 1)	session.removeAttribute("login");
		return mav;
	}
	
	@GetMapping("/newPass")
	public void newPass() {}
	
	@PostMapping("/newPass")
	public ModelAndView newPass(MemberDTO dto) {
		ModelAndView mav = new ModelAndView("alert");
		
		// ID와 Email이 일치하는 계정이 있는가
		MemberDTO target = ms.findMemberByEmail(dto);
		
		if(target != null) {
			// 계정이 있으면, 새로 문자열을 만들어서 update 하고
			String newPass = ms.newPass(target);
			
			// 사용자에게 신규 비밀번호를 alert을 통해서 알려주기
			// 로그인 페이지로 이동
			mav.addObject("msg", "변경된 비밀번호는 [" + newPass + "] 입니다");
			mav.addObject("url", "/login");
		}
		else {
			// 일치하는 계정이 없다는 메시지를 alert을 통해서 알려주기
			// 이전페이지로 이동
			mav.addObject("msg", "입력한 정보와 일치하는 계정이 없습니다");
		}
		return mav;
	}
	
	@ExceptionHandler(DuplicateKeyException.class)	// PK나 UK가 중복되어 발생하는 예외
	public ModelAndView duplicateJoin(DuplicateKeyException e) {
		ModelAndView mav = new ModelAndView("alert");
		mav.addObject("msg", "이미 사용중인 ID입니다. 다른 ID로 가입을 시도해 주세요");
		return mav;
	}
}
---------------------------
#)HomeController.java
package com.itbank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.service.TestService;

@Controller
public class HomeController {
	
	@Autowired private TestService ts;

	@RequestMapping("/")
	public ModelAndView home() {
		ModelAndView mav = new ModelAndView("home");
		String test = ts.getTest();
		mav.addObject("test", test);
		return mav;
	}
}
----------------------------
#)TestService.java
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.model.TestDAO;

@Service
public class TestService {
	
	@Autowired private TestDAO dao;

	public String getTest() {
//		return "서현씨 다 됐나요?";
		return dao.selectVersion();
	}

}
---------------------------
#)TestDAO
package com.itbank.model;

import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository
public interface TestDAO {

	@Select("select banner from v$version")
	String selectVersion();

	
}
------------------------
#)BookController.java
package com.itbank.controller;

import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.book.BookDTO;
import com.itbank.service.BookService;

@Controller
public class BookController {

	@Autowired private BookService bs;
	
	@GetMapping("/bookList")
	public String bookList() {
		return "redirect:/bookList/idx";
	}
	
	@GetMapping("/bookList/{order}")
	public ModelAndView bookList(@RequestParam HashMap<String, String> map,
								 @PathVariable String order) {
		ModelAndView mav = new ModelAndView("bookList");
		
		map.put("order", order);
//		System.out.println("map : " + map);
//		HashMap을 이용하여 parameter를 받을 때는 어노테이션 @RequestParam을 생략하면 안된다
		
		List<BookDTO> list = bs.getList(map);
		mav.addObject("list", list);
		return mav;
	}
	
	@GetMapping("/deleteBook/{idx}")	
	public ModelAndView deleteBook(@PathVariable int idx) {
		
		ModelAndView mav = new ModelAndView("alert");
		int row = bs.deleteBook(idx);

		if(row == 1) {
			mav.addObject("msg", idx + "번 도서정보가 삭제되었습니다");
			mav.addObject("url", "bookList");
		}
		else {
			mav.addObject("msg", "삭제가 처리되지 않았습니다");
			// url을 지정하지 않으면 history.go(-1) 로 이전 페이지로 이동하도록
		}
		return mav;
	}
	
	@GetMapping("/modifyBook/{idx}")
	public ModelAndView modify(@PathVariable int idx) {
		ModelAndView mav = new ModelAndView("modifyBook");
		BookDTO dto = bs.select(idx);	// 객체 하나의 정보를 불러와서
		mav.addObject("dto", dto);		// 넘겨주고, jsp에서 form 태그의 value값으로 활용한다
		return mav;
	}
	
	@PostMapping("/modifyBook/{idx}")
	public ModelAndView modify(BookDTO dto) {	// 사용자가 수정 이후 제출한 데이터를 dto로 받는다
		ModelAndView mav = new ModelAndView("alert");
		System.out.println("수정 도서의 번호 : " + dto.getIdx());
		int row = bs.modify(dto);
		if(row == 1) {
			mav.addObject("msg", "수정 성공 !!");
			mav.addObject("url", "bookList");
		}
		else {
			mav.addObject("msg", "수정 실패 !!");
		}
		return mav;
	}
	
	@GetMapping("/addBook")
	public void addBook() {
		System.out.println("2) 컨트롤러");
	}
	
	@PostMapping("/addBook")
	public ModelAndView addBook(BookDTO dto) {
		ModelAndView mav = new ModelAndView("alert");
		int row = bs.insert(dto);
		mav.addObject("msg", row == 1 ? "추가 성공" : "추가 실패");
		mav.addObject("url", row == 1 ? "bookList" : "");
		return mav;
	}
}
------------------------
#)LoginIntercepter.java
package com.itbank.intercepter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.itbank.member.MemberDTO;

public class LoginIntercepter extends HandlerInterceptorAdapter {

	// Menu - Source - Override/Implement method
	
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {
		
		HttpSession session = request.getSession();
		MemberDTO login = (MemberDTO) session.getAttribute("login");
		System.out.print("1) ");
		System.out.println(login != null ? "로그인 사용자 : " + login.getUserid() : "로그인 없음" );
		
		if(login != null) {
			return true;
		}
		
		String cpath = request.getContextPath();
		String url = request.getRequestURL().toString();
		// 클라이언트 요청한 주소 (원래 가려고 했던 주소)

		response.sendRedirect(cpath + "/login?url=" + url);
		return false;	// 반환값에 따라서 기존 요청에 대한 처리를 그대로 진행하거나	true
						// 혹은 진행을 중단하고 새로운 응답을 만들어서 보낸다		false
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
			ModelAndView modelAndView) throws Exception {

	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
			throws Exception {

	}

	
}
----------------------------
#)MemberDTO.java
package com.itbank.member;

// LOMBOK : getter/setter/contructor/toString
public class MemberDTO {
	
	private String userid, userpw, username, email, gender;
	
	@Override
	public String toString() {
		return String.format("{%s, %s, %s, %s, %s}", userid, userpw, username, email, gender);
	}

	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getUserpw() {
		return userpw;
	}
	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
}
--------------------------
#)MemberDAO.java
package com.itbank.member;

import java.util.List;

import org.apache.ibatis.annotations.Select;

public interface MemberDAO {

	@Select("select * from member order by userid")
	List<MemberDTO> selectList();
	
	int insert(MemberDTO dto);

	MemberDTO selectMember(MemberDTO dto);

	int update(MemberDTO target);
	
	// 어노테이션 대신 XML 설정으로 쿼리문 수행하기
	// namespace 는 패키지.인터페이스이름
	// id는 메서드이름

	// <mapper namespace="com.itbank.member.MemberDAO">
	//		<select id="selectMembmer" resultType="com.itbank.member.MemberDTO">
	//			select * from member where userid = #{userid} and userpw = #{userpw}
	//		</select>
	// </mapper>
	

}
----------------------------------
#)MemberService

package com.itbank.service;

import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.member.MemberDAO;
import com.itbank.member.MemberDTO;

@Service
public class MemberService {

	@Autowired private MemberDAO dao;
	
	public List<MemberDTO> getMemberList() {
		List<MemberDTO> list = dao.selectList();
		
		// 리스트 내부의 각 객체에 대해서, 비밀번호의 첫글자를 제외한 나머지를 *로 변경하여 반환
		for(MemberDTO dto : list) {
			String pass = dto.getUserpw();
			String newPass = pass.charAt(0) + "";
			for(int i = 0; i < pass.length() - 1; i++) {
				newPass += "*";
			}
			dto.setUserpw(newPass);
		}
		return list;
	}

	public MemberDTO login(MemberDTO dto) {
		MemberDTO login = dao.selectMember(dto);	// userid, userpw
		System.out.println("비밀번호로 찾은 계정 : " + login);
		return login;
	}

	public int join(MemberDTO dto) {
		return dao.insert(dto);
	}

	public MemberDTO findMemberByEmail(MemberDTO dto) {
		MemberDTO target = dao.selectMember(dto);	// userid, email
		System.out.println("이메일로 찾은 계정 : " + target);
		return target;
	}

	public String newPass(MemberDTO target) {
		String newPass = UUID.randomUUID().toString().replaceAll("-", "").substring(0, 8);
		// 새로운 UUID 생성 -> 			a124h6324-57235-lkasdgf11-12345
		// replaceAll("-", "") -> 	a124h632457235lkasdgf1112345
		// substring(0, 8) ->		a124h632
		target.setUserpw(newPass);
		int row = dao.update(target);		// 수정이 되었으면 newPass를 반환, 아니면 null을 반환
		System.out.println("수정 결과 : " + row);
		return row == 1 ? newPass : null;
	}

	public int update(MemberDTO dto) {
		return dao.update(dto);
		// 비밀번호 재발급때 구성했던 dao.update() 가 동적 쿼리문으로 구성되어 있어서
		// 별도로 과정을 새로 만들지 않아도, 기존의 함수를 호출하여 그대로 재사용이 가능했다
	}

}
---------------------
#)BookService

package com.itbank.service;

import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.book.BookDAO;
import com.itbank.book.BookDTO;

@Service
public class BookService {
	
	@Autowired private BookDAO dao;

	public List<BookDTO> getList(HashMap<String, String> map) {
		return dao.selectList(map);
	}

	public int deleteBook(int idx) {
		return dao.delete(idx);
	}

	public BookDTO select(int idx) {
		return dao.select(idx);
	}

	public int modify(BookDTO dto) {
		return dao.update(dto);
	}

	public int insert(BookDTO dto) {
		return dao.insert(dto);
	}

}
-----------------------
#)newPass.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>비밀번호 재발급</h2>

<div class="jcce">
	<h4>비밀번호를 재발급할 계정의 ID와 Email을 입력하여 인증을 진행해주세요</h4>
</div>

<div class="jcce">
	<form method="POST">
		<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
		<p><input type="email" name="email" placeholder="foo@bar.com" required></p>
		<p><input class="btn" type="submit" value="재발급신청"></p>
	</form>
</div>

</body>
</html>
----------------------------
#)modify.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>도서 정보 수정 : ${dto.idx }번 도서</h2>

<form method="POST">
	<p><input type="text" name="name" value="${dto.name }" required autofocus></p>
	<p><input type="text" name="author" value="${dto.author }" required></p>
	<p><input type="text" name="publisher" value="${dto.publisher }" required></p>
	<p><input type="date" name="publishDate" value="${dto.publishDate }" required></p>
	<p><input type="number" step="100" name="price" value="${dto.price }" required></p>
	<p>
		<textarea name="description" required>${dto.description }</textarea>
	</p>
	<p><input type="submit" value="수정"></p>
</form>	

</body>
</html>
---------------------------
#)memberUpdate.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2 style="user-select: none;">회원 정보 수정</h2>
<div class="jcce">
	<form method="POST">
		<p><input type="text" name="userid" placeholder="ID" value="${info.userid }" readonly></p>
		<p><input type="password" name="userpw" placeholder="Password" value="${info.userpw }" required></p>
		<p><input type="text" name="username" placeholder="Name" value="${info.username }" required></p>
		<p><input type="text" name="email" placeholder="E-mail" value="${info.email }" required></p>
		<p>
			<label><input type="radio" name="gender" value="남성" ${info.gender == '남성' ? 'checked' : '' } required>남성</label>
			<label><input type="radio" name="gender" value="여성" ${info.gender == '여성' ? 'checked' : '' } required>여성</label>
		</p>
		<p><input type="submit" value="수정"></p>
	</form>
</div>
</body>
</html>
----------------------------
#)memberList.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>회원 목록</h2>
<hr>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th>userid</th>
		<th>userpw</th>
		<th>username</th>
		<th>email</th>
		<th>gender</th>
	</tr>
	<c:forEach var="member" items="${list }">
	<tr>
		<td>${member.userid }</td>
		<td>${member.userpw }</td>
		<td>${member.username }</td>
		<td>${member.email }</td>
		<td>${member.gender }</td>
	</tr>
	</c:forEach>
</table>

</body>
</html>
------------------------------
#)memberInfo.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>회원 정보 확인</h2>

<div class="jcce">
	<div>
		<p>ID : ${info.userid }</p>
		<p>PW : ********</p>
		<p>NAME : ${info.username }</p>
		<p>E-Mail : ${info.email }</p>
		<p>Gender : ${info.gender }</p>
		<p>
			<a href="${cpath }/memberUpdate"><button>정보 수정</button></a>
			<button>회원 탈퇴</button>
		</p>
	</div>
</div>

</body>
</html>
---------------------------------
#)login.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>로그인</h2>
<hr>
<form method="POST" class="ffc aice jcfs">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="submit"></p>
</form>

<div class="jcce">
	<a href="${cpath }/join">아직 회원이 아니십니까?</a>&nbsp; &nbsp;
	<a href="${cpath }/newPass">비밀번호를 분실했습니다</a>
</div>

</body>
</html>
-----------------------------
#)join.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>회원 가입</h2>
<!-- 
		회원 가입 코드를 직접 구현하고, myBatis에서는 xml을 활용하여 처리해보세요
		가입을 처리한 이후 로그인 페이지로 리다이렉트 하세요
 -->
<div class="jcce">
<form method="POST">
	<p><input type="text" name="userid" placeholder="ID" required autofocus></p>
	<p><input type="password" name="userpw" placeholder="Password" required></p>
	<p><input type="text" name="username" placeholder="Name" required></p>
	<p><input type="text" name="email" placeholder="E-mail" required></p>
	<p>
		<label><input type="radio" name="gender" value="남성" required>남성</label>
		<label><input type="radio" name="gender" value="여성" required>여성</label>
	</p>
	<p><input type="submit" value="가입"></p>
</form>
</div>

</body>
</html>
----------------------------
#)home.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>대문 페이지</h2>


</body>
</html>
---------------------------
#)header.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<link rel="stylesheet" type="text/css" href="${cpath }/resources/css/style.css">
</head>
<body>
<header>
	<h1><a href="${cpath }">day09</a></h1>
	<div class="jcfe" style="padding-right: 20px; height: 20px;">
		<c:if test="${not empty login }">
		<a href="${cpath }/memberInfo">${login.userid } (${login.username })</a>
		</c:if>
	</div>
	<nav>
		<ul class="ffr jcce">
			<c:if test="${empty login }">
				<li><a class="btn" href="${cpath }/login">로그인</a></li>
			</c:if>
			<c:if test="${not empty login }">
				<li><a class="btn" href="${cpath }/logout">로그아웃</a></li>
			</c:if>
			<li><a class="btn" href="${cpath }/bookList">도서 관리</a></li>
		</ul>
	</nav>
</header>
-----------------------
#)bookList.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>도서 목록</h2>

<div class="jcsb" style="margin: 20px 0; max-width: 1550px;">
	<div>
		<form>
			<select name="column">
				<option value="idx" ${param.column eq 'idx' ? 'selected' : '' }>도서 번호로 검색</option>
				<option value="name" ${param.column eq 'name' ? 'selected' : '' }>도서명으로 검색</option>
				<option value="author" ${param.column eq 'author' ? 'selected' : '' }>저자명으로 검색</option>
			</select>
			<input type="search" name="search" placeholder="검색어를 입력하세요" value="${param.search }">
			<input type="submit" value="검색">
		</form>
	</div>
	
	<div style="margin: 0 10px;">
		<a href="${cpath }/addBook"><button>추가</button></a>
	</div>
</div>

<table border="1" cellpadding="7" cellspacing="0">
	<tr>
		<th><a class="btn" href="${cpath }/bookList/idx">IDX</a></th>
		<th><a class="btn" href="${cpath }/bookList/name">NAME</a></th>
		<th><a class="btn" href="${cpath }/bookList/author">AUTHOR</a></th>
		<th><a class="btn" href="${cpath }/bookList/publisher">PUBLISHER</a></th>
		<th><a class="btn" href="${cpath }/bookList/publishDate">PUBLISHDATE</a></th>
		<th><a class="btn" href="${cpath }/bookList/price">PRICE</a></th>
		<th><a class="btn" href="${cpath }/bookList/description">DESCRIPTION</a></th>
		<th>수정</th>
		<th>삭제</th>
	</tr>
	<c:forEach var="dto" items="${list }">
	<tr>
		<td>${dto.idx }</td>
		<td>${dto.name }</td>
		<td>${dto.author }</td>
		<td>${dto.publisher }</td>
		<td>${dto.publishDate }</td>
		<td>${dto.price }</td>
		<td>${dto.description }</td>
		<td><button class="modifyBtn" data-idx="${dto.idx }">수정</button></td>
		<td><button class="deleteBtn" data-idx="${dto.idx }">삭제</button></td>
	</tr>
	</c:forEach>
</table>

<script>
	const cpath = '${cpath}'
	const modifyBtnList = document.querySelectorAll('.modifyBtn')
	const deleteBtnList = document.querySelectorAll('.deleteBtn')
	
	// 삭제 버튼을 클릭하면 실행되는 함수를 작성
	deleteBtnList.forEach(function(btn) {	// 리스트 내부의 각각의 버튼을 btn이라고 할때
		btn.onclick = function(event) {		// btn을 클릭하면 실행되는 이벤트 함수의 내용
			const idx = event.target.dataset.idx	// 태그에서 data-idx 속성을 불러와서 변수에 저장
			if(confirm('정말 ' + idx + '번 도서를 삭제하시겠습니까?')) {		// 사용자가 확인을 클릭하면
				location.href = cpath + '/' + 'deleteBook/' + idx 	// 삭제 페이지로 이동
			}
		}
	})
	
	// 수정 버튼을 클릭하면 실행되는 함수를 작성
	for(let i = 0; i < modifyBtnList.length; i++) {
		const btn = modifyBtnList[i]
		btn.onclick = function(event) {
			const idx = event.target.dataset.idx
			location.href = cpath + '/' + 'modifyBook/' + idx 	
		}
	}
	
</script>

</body>
</html>
-----------------------
#)alert.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<div id="alert" class="jcce aice ffc" 
	 style="border: 2px solid black;
	        box-shadow: 5px 5px grey;
	        width: 500px;
	        height: 300px;
	        margin: 50px auto;
	        border-radius: 25px;
	        
	        opacity: 0;
	        position: absolute;
	        top: 50%;
	        transition-duration: 1.5s">
	<div style="font-size: 16px; font-weight: bold; margin: 30px;">
		${msg }
	</div>
	<button class="btn">확인</button>
</div>

<script>
	const cpath = '${cpath}'
	const msg = '${msg}'
	const url = '${url}'
	const alert = document.getElementById('alert')
	
	const clientWidth = document.body.clientWidth
	const alertWidth = alert.clientWidth
	const left = (clientWidth / 2) - (alertWidth / 2)
	
	window.onload = function(event) {
		alert.style.left = left + 'px'
		console.log('onload !!')
		alert.style.opacity = 1;
		alert.style.top = '30%'
	}
	document.querySelector('button').onclick = function() {
		if(url == '') {
	 		history.go(-1);
	 	}
	 	else {
	 		location.href = cpath + '/' + url
	 	}
	}
	
// 	alert(msg)
// 	if(url == '') {
// 		history.go(-1);
// 	}
// 	else {
// 		location.href = cpath + '/' + url
// 	}
</script>

</body>
</html>
----------------------------
#)addBook.jsp

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<h2>도서 추가</h2>

<form method="POST">
	<p><input type="text" name="name" placeholder="도서명" required autofocus></p>
	<p><input type="text" name="author" placeholder="저자명" required></p>
	<p><input type="text" name="publisher" placeholder="출판사" required></p>
	<p><input type="date" name="publishDate" required></p>
	<p><input type="number" step="100" name="price" placeholder="가격" required></p>
	<p>
		<textarea name="description" placeholder="도서 설명" required></textarea>
	</p>
	<p><input type="submit" value="추가"></p>
</form>	

<script>
	const today = new Date().toISOString().split('T')[0]
	console.log(today)
	
	document.querySelector('input[type="date"]').value = today
</script>

</body>
</html>


===============================================================
//보충설명
package com.itbank.controller;

import java.util.Scanner;

public class StringCompare {
	public static void main(String[] args) {	// char[], char* 
		
		Scanner sc = new Scanner(System.in);
		
		String word1 = "apple";				// 메모리에 "apple"이라는 상수를 만들고 그 주소를 word1에 저장
		String word2 = "apple";				// 이미 "apple"이라는 상수가 있으니, 그 주소를 똑같이 저장
		String word3 = new String("apple");
		System.out.print("apple 이라고 입력 : ");
		String word4 = sc.nextLine();		// 사용자가 apple이라고 입력한다는 보장이 없다
		
		System.out.println(word1 == word2);	// 참조변수끼리 == 는 바라보는 대상이 일치하는가를 비교한다
		System.out.println(word1 == word3);	// 내용이 일치하는지 확인하려면 word1.equals(word3)
		System.out.println(word1 == word4);	// 대소문자 구분없이 하려면 word1.equalsIgnoreCase(word4)
		
		// 1) 코드에서 만든 모든 데이터는 메모리 상에 존재한다
		// 2) 변수형태로 존재하거나, 상수(리터럴)형태로 존재할 수 있다
		// 3) 자바는 한번 사용한 상수가 있다면, 참조변수를 같은 값으로 넣어준다
		
		sc.close();
	}
}
===============================================================
//day09(2)

//servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources // by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 
		resources	정적 자원에 대한 요청도 DispatcherServlet이 처리하므로, 어떻게 처리할지 규칙을 작성하는 태그
		mapping		브라우저가 요청하는 주소형식, /로 시작하면 ContextPath 이후 경로를 작성하면 된다
		location	mapping 형식의 요청이 들어오면 자원을 찾을 폴더 위치, 폴더이므로 마지막에 꼭 /로 마무리하자
	 -->
	<resources mapping="/upload/**" location="file:/upload/" />
	<resources mapping="/upload/**" location="http://" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="multipartResolver"
				class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 최대 업로드 용량 -->
		<beans:property name="maxUploadSize" value="10485760" />
		
		<!-- 메모리 상에 존재할 수 있는 최대 크기 -->
		<beans:property name="maxInMemorySize" value="10485760" />
		
		<!-- 파일이름(혹은 텍스트라면 내용)에 대한 인코딩 -->
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>
	
	<context:component-scan base-package="com.itbank.controller" />
	
	
	
</beans:beans> 
-----------------------------------
//rootcontext.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<context:component-scan base-package="com.itbank.service" />		
	<context:component-scan base-package="com.itbank.model" />		
		
</beans>
-----------------------------------
//HomeController.java
package com.itbank.controller;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.multipart.MultipartFile;

import com.itbank.service.FileService;

@Controller
public class HomeController {
	
	@Autowired private FileService fs;
	
	@GetMapping("/")
	public String home() {
		return "home";
	}
	
	@PostMapping("/")
	public String home(MultipartFile file) throws IllegalStateException, IOException {	
									// 파일을 매개변수로 받아서 처리
		System.out.println(file);
		System.out.println(file.getName());		// 	<input type="file" name="file">
		System.out.println(file.getOriginalFilename());	// 관대하.jpg
		System.out.println(file.getContentType());		// image/jpeg
		System.out.println(file.getSize());				// 파일 용량 (byte)
		System.out.println();
		
		boolean isUploaded = fs.upload(file);
		System.out.println(isUploaded ? "성공" : "실패");
		
		return "redirect:/";
	}
	
}
--------------------------------------
//UploadController.java
package com.itbank.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.model.TestDTO;
import com.itbank.service.FileService;

@Controller
public class UploadController {
	
	@Autowired private FileService fs;

	@GetMapping("/upload2")
	public ModelAndView upload2() {
		ModelAndView mav = new ModelAndView();	// viewName을 전달하지 않으니 void와 동일하게 jsp를 찾아간다
		List<TestDTO> list = fs.selectList();
		mav.addObject("list", list);
		return mav;
	}
	
	@PostMapping("/upload2")
	public String upload2(TestDTO dto) throws IllegalStateException, IOException {
		
		System.out.println(dto.getName());
		System.out.println(dto.getAge());
		System.out.println(dto.getUploadFile().getOriginalFilename());
		
		int row = fs.upload2(dto);
		
		return "redirect:/upload2";
	}
	
	
}
-------------------------------------
//FileService.java
package com.itbank.service;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.itbank.model.TestDAO;
import com.itbank.model.TestDTO;

@Service
public class FileService {
	
	@Autowired private TestDAO dao;

	// 프로젝트 내부 경로가 아닌, 별도의 경로에 파일을 모아둔다 (업로드 수가 많아져도 프로젝트는 영향이 없다)
	private String uploadPath = "/upload";
	private File dir;
	
	public FileService() {
		dir = new File(uploadPath);
		if(dir.exists() == false) {
			System.out.println("폴더가 없어서 새로 생성함");
			dir.mkdirs();
		}
	}
	
	public boolean upload(MultipartFile file) throws IllegalStateException, IOException {
		File dest = new File(dir, file.getOriginalFilename());
		// new File(폴더위치, 파일이름);
		
		file.transferTo(dest);	// MultipartFile을 File 형태로 변경하면서 업로드
		
		return dest.exists() && dest.isFile();	// 대상이 존재하고, 형식이 파일이면 true
	}

	public int upload2(TestDTO dto) throws IllegalStateException, IOException {
		// 1) 실제 업로드하고, DB에 저장할 파일이름부터 결정하자
		// 여기서는 날짜를 활용한다
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String today = sdf.format(new Date());
		String fileName = dto.getUploadFile().getOriginalFilename();
		fileName = today + "_" + fileName;
		
		// 2) 결정된 이름으로 파일을 업로드 한다
		File dest = new File(dir, fileName);
		dto.getUploadFile().transferTo(dest);
		
		// 3) DB에 기록해야 하니 결정된 파일 이름을 dto에 세팅한다
		dto.setFileName(fileName);
		
		// 4) DAO에 넘어갔다면 쿼리문을 만들어줄때 fileName을 사용하면 된다
		String sql = "insert into TABLE values ('%s', %s, '%s')";
		sql = String.format(sql, dto.getName(), dto.getAge(), dto.getFileName());
		System.out.println(sql);
		
//		String extName = fileName.substring(fileName.indexOf("."));
//		System.out.println("확장자 : " + extName);
		
		// 5) DB에 저장하는 대신 리스트에 저장해보자
		int row = dao.insert(dto);
		
		return row;
	}

	public List<TestDTO> selectList() {
		return dao.selectList();
	}
}
----------------------------------------
//TestDTO
package com.itbank.model;

import org.springframework.web.multipart.MultipartFile;

public class TestDTO {

	private String name;				// <input name="name">
	private int age;					// <input name="age">
	private MultipartFile uploadFile;	// <input name="uploadFile">
	private String fileName;			// 없음 (getName() 함수가 파일의 이름을 반환하도록 설정)
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public MultipartFile getUploadFile() {
		return uploadFile;
	}
	public void setUploadFile(MultipartFile uploadFile) {
		this.uploadFile = uploadFile;
	}
	public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	
	
}
------------------------------
//TestDAO
package com.itbank.model;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Component;

@Component		// @Repository 는 내부에서 발생하는 모든 예외를 DataExcessException 으로 처리하는 특징이 있다
public class TestDAO {

	// 스프링 빈이므로 서버가 재시작하면 내부 데이터가 초기화된다 (유지되지 않는다 == 영속성을 만족하지 않는다)
	private ArrayList<TestDTO> list = new ArrayList<TestDTO>();

	public int insert(TestDTO dto) {
		boolean result = list.add(dto);	// 추가하고 결과를 저장
		System.out.println("리스트에 들어있는 객체의 개수 : " + list.size());
		return result ? 1 : 0;
	}

	public List<TestDTO> selectList() {
		return list;
	}
	
	
}
-------------------------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>home.jsp</title>
</head>
<body>

<h1>스프링 파일 업로드</h1>
<hr>
<form method="POST" enctype="multipart/form-data">
	<p><input type="file" name="file"></p>
	<p><input type="submit" value="전송"></p>
</form>

<a href="/day09_file/upload2">파일을 포함한 여러 파라미터 전송</a>


</body>
</html>
--------------------------------
//upload2.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="cpath" value="${pageContext.request.contextPath }" />
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>upload2.jsp</title>
</head>
<body>

<h1>스프링 파일 업로드 (2)</h1>
<hr>
<form method="POST" enctype="multipart/form-data">
	<p><input name="name" placeholder="이름"></p>
	<p><input name="age" type="number" placeholder="나이"></p>
	<p><input type="file" name="uploadFile"></p>
	<p><input type="submit" value="전송"></p>
</form>

<div style="display: flex; 
			flex-flow: wrap; 
			width: 800px; 
			border: 2px solid black; 
			padding: 20px;">
	<c:forEach var="dto" items="${list }">
	<div style="border: 1px solid blue; 
				padding: 10px;
				margin-right: 10px;">
		<div class="name">${dto.name }</div>
		<div class="age">${dto.age }살</div>
		<div class="img">
			<img src="${cpath }/upload/${dto.fileName }" width="200px">
		</div>
	</div>
	</c:forEach>
</div>

<a href="/day09_file">대문 페이지로 돌아가기</a>


</body>
</html>
================================================================
//day10
//servlet-context
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/**   **/by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/upload/**" location="file:D:/upload/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="multipartResolver"
				class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="20971520" />
		<beans:property name="maxInMemorySize" value="20971520" />
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>
	
	<interceptors>
		<interceptor>
			<mapping path="/upload" />
			<beans:bean id="loginIntercepter" class="com.itbank.intercepter.LoginIntercepter" />
		</interceptor>
	</interceptors>
	
	<context:component-scan base-package="com.itbank.controller" />
	
</beans:beans> 
--------------------------------
//root-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<mybatis-spring:scan base-package="com.itbank.image" />
	<mybatis-spring:scan base-package="com.itbank.member" />
		
</beans>
----------------------------------
//formModule.js
const uploadForm = document.getElementById('uploadForm')

uploadForm.onsubmit = function(event) {
	event.preventDefault()		// submit을 시도하면 일단 막는다
	console.log('login : ' + login)
	if(login == '') {
		alert('로그인 하셔야 파일 업로드가 가능합니다')
// 			return
	}
	event.target.submit()		// 상단의 if에서 종료되지 않으면 의도했던 대로 제출해라
}

uploadForm.querySelector('input[name="uploadUser"]').onclick = function(event) {
	if(login == '') {
		location.href = cpath + '/login'
	}
}
---------------------------------------
//HomeController.java
package com.itbank.controller;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

import com.itbank.image.UploadDTO;
import com.itbank.member.MemberDTO;
import com.itbank.service.MemberService;
import com.itbank.service.UploadService;

@Controller
public class HomeController {
	
	@Autowired	// 스프링 빈으로 등록된 객체만 자동으로 의존 주입이 가능하다
	private UploadService us;
	
	@Autowired 
	private MemberService ms; 
	
	// 목록 출력, 업로드 폼 표시, (로그인)
	@GetMapping("/")
	public ModelAndView home() {
		ModelAndView mav = new ModelAndView("home");
		List<UploadDTO> list = us.getList();
		mav.addObject("list", list);
		return mav;
	}
	
	// 업로드 처리만 하고 목록페이지로 리다이렉트
	@PostMapping("/upload")
	public String upload(UploadDTO dto) throws IllegalStateException, IOException {
		int row = us.upload(dto);
		System.out.println(row == 1 ? "업로드 성공" : "업로드 실패");
		return "redirect:/";	// 바로 위에 있는 home()을 다시 호출하도록
	}
	
	@GetMapping("/login")
	public void login() {}
	
	@PostMapping("/login")
	public String login(MemberDTO dto, HttpSession session) {
		MemberDTO login = ms.login(dto);
		session.setAttribute("login", login);
		return "redirect:/";
	}
	
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.invalidate();
		return "redirect:/";
	}
	
}

----------------------------
//UploadDTO.java
package com.itbank.image;

import java.sql.Date;

import org.springframework.web.multipart.MultipartFile;

//	create table image2 (
//		originalFileName	varchar2(255)	not null,
//		storedFileName		varchar2(255) 	not null,
//		uploadDate			date			default sysdate,
//		uploadUser			varchar2(100)	not null,	
//	
//		constraint image2_member_fk 	--생성할 외래키 규칙 이름
//		foreign key(uploadUser)			--외래키로 지정할 컬럼
//		references member(userid)		--외래키가 참조할 대상
//		on delete cascade				--삭제 시 처리방침
//	);

public class UploadDTO {
	private String originalFileName;
	private String storedFileName;
	private Date uploadDate;
	private String uploadUser;
	private MultipartFile uploadFile;	// form에서 전송하는 파일을 받기 위해서
	
	public String getOriginalFileName() {
		return originalFileName;
	}
	public void setOriginalFileName(String originalFileName) {
		this.originalFileName = originalFileName;
	}
	public String getStoredFileName() {
		return storedFileName;
	}
	public void setStoredFileName(String storedFileName) {
		this.storedFileName = storedFileName;
	}
	public Date getUploadDate() {
		return uploadDate;
	}
	public void setUploadDate(Date uploadDate) {
		this.uploadDate = uploadDate;
	}
	public String getUploadUser() {
		return uploadUser;
	}
	public void setUploadUser(String uploadUser) {
		this.uploadUser = uploadUser;
	}
	public MultipartFile getUploadFile() {
		return uploadFile;
	}
	public void setUploadFile(MultipartFile uploadFile) {
		this.uploadFile = uploadFile;
	}
	
	
	
}
---------------------------------------
//UploadDAO.java
package com.itbank.image;

import java.util.List;

import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Select;
import org.springframework.stereotype.Repository;

@Repository	// 생략해도 작동은 되지만, 명시적인 표현 + 예외 처리를 위해서 작성한다
public interface UploadDAO {

	@Select("select * from image2 order by uploadDate")
	List<UploadDTO> selectList();

	@Insert("insert into image2 (originalFileName, storedFileName, uploadUser) " + 
			"    values (#{originalFileName}, #{storedFileName}, #{uploadUser})") 
	int insert(UploadDTO dto);

}
---------------------------------------------
//LoginIntercepter.java
package com.itbank.intercepter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.itbank.member.MemberDTO;

public class LoginIntercepter extends HandlerInterceptorAdapter {

	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
			throws Exception {

		MemberDTO login = (MemberDTO)request.getSession().getAttribute("login");
		
		if(login == null) {
			response.sendRedirect(request.getContextPath() + "/login");
			return false;
		}
		return true;
	}
	
}
--------------------------------------
//MemberDTO.java
package com.itbank.member;

// LOMBOK : getter/setter/contructor/toString
public class MemberDTO {
	
	private String userid, userpw, username, email, gender;
	
	@Override
	public String toString() {
		return String.format("{%s, %s, %s, %s, %s}", userid, userpw, username, email, gender);
	}

	public String getUserid() {
		return userid;
	}
	public void setUserid(String userid) {
		this.userid = userid;
	}
	public String getUserpw() {
		return userpw;
	}
	public void setUserpw(String userpw) {
		this.userpw = userpw;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	
	

}
-----------------------------------
//MemberDAO.java
package com.itbank.member;

import org.apache.ibatis.annotations.Select;

public interface MemberDAO {

	@Select("select * from member where userid=#{userid} and userpw=#{userpw}")
	MemberDTO selectMember(MemberDTO dto);

}
----------------------------------------
//UploadService.java
package com.itbank.service;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.image.UploadDAO;
import com.itbank.image.UploadDTO;

@Service
public class UploadService {
	
	private File dir = new File("D:\\upload");
	
	
	
	@Autowired	// DAO가 인터페이스라면 DAO를 구현한 익명 프록시 객체가 스프링 빈으로 등록된다
	private UploadDAO dao;

	public List<UploadDTO> getList() {
		return dao.selectList();
	}

	public int upload(UploadDTO dto) throws IllegalStateException, IOException {
		if(dir.exists() == false) {
			dir.mkdirs();
		}
		System.out.println(dto.getUploadFile());
		// 위 출력문이 null이면 파일이 안들어왔다는 말이니까 파일업로드 관련 multipartResolver 객체가 있는지 확인한다
		// 있으면 pom.xml 에서 업로드 관련 라이브러리 의존성이 작성되어 있는지 확인한다
		
		String originalFileName = dto.getUploadFile().getOriginalFilename();
		String storedFileName = UUID.randomUUID().toString().replaceAll("-", "");
		String extName = originalFileName.substring(originalFileName.lastIndexOf("."));
		
		storedFileName += extName;
		
		dto.setOriginalFileName(originalFileName);
		dto.setStoredFileName(storedFileName);
		
		File dest = new File(dir, storedFileName);
		dto.getUploadFile().transferTo(dest);
		
		return dao.insert(dto);
	}

}
------------------------------
//MemberService.java
package com.itbank.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itbank.member.MemberDAO;
import com.itbank.member.MemberDTO;

@Service
public class MemberService {

	@Autowired private MemberDAO dao;
	
	public MemberDTO login(MemberDTO dto) {
		return dao.selectMember(dto);
	}

}
---------------------------------
//login.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>
<hr>
<h2>로그인 페이지</h2>

<form id="loginForm" method="POST" action="${cpath }/login">
	<p><input type="text" name="userid" placeholder="ID"></p>
	<p><input type="password" name="userpw" placeholder="Password"></p>
	<p><input type="submit" value="로그인"></p>
</form>

</body>
</html>
-------------------------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<div id="loginInfo" >
	<c:if test="${empty login }">
		<form id="loginForm" method="POST" action="${cpath }/login">
			<input type="text" name="userid" placeholder="ID">
			<input type="password" name="userpw" placeholder="Password">
			<input type="submit" value="로그인">
		</form>
	</c:if>
	<c:if test="${not empty login }">
		${login.userid }
		&nbsp;
		<a href="${cpath }/logout"><button>로그아웃</button></a>
	</c:if>
</div>

<hr>

<div>
	<form id="uploadForm" method="POST" enctype="multipart/form-data" action="${cpath }/upload">
		<div><input type="text" name="uploadUser" value="${login.userid }" placeholder="로그인이 필요합니다" readonly></div>
		<div><input type="file" name="uploadFile"></div>
		<div><input type="submit" value="전송"></div>
	</form>
</div>
<div id="imageList">
	<c:forEach var="dto" items="${list }">
	<div class="item">
		<div class="image">
			<a href="${cpath }/upload/${dto.storedFileName }" target="_blank">
				<img src="${cpath }/upload/${dto.storedFileName }" width="200px"></a>
			
		</div>
		<div>
			<div class="originalFileName">${dto.originalFileName }</div>
			<div class="storedFileName">${dto.storedFileName }</div>
			<div class="uploadDate"><fmt:formatDate value="${dto.uploadDate }" pattern="yyyy-MM-dd a hh:mm" /></div>
			<div class="uploadUser">${dto.uploadUser }</div>
		</div>
	</div>
	</c:forEach>
</div>

<script src="${cpath }/resources/js/formModule.js"></script>


</body>
</html>
-------------------------
//header.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<c:set var="cpath" value="${pageContext.request.contextPath }" />
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>day10 - 이미지 갤러리</title>
<link type="text/css" 
	  rel="stylesheet" 
	  href="${cpath }/resources/css/style.css">
</head>
<body>

<script>
	const login = '${login.userid}'
	const cpath = '${cpath}'
</script>

<h1><a href="${cpath }">이미지 갤러리</a></h1>




================================================================
//day11
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/**   */by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.itbank.controller" />
	
	
	
</beans:beans>
--------------------------
//root-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
		
</beans>
---------------------
//HomeController
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class HomeController {
	
	@RequestMapping("/")
	public String home() {
		return "home";
	}
}
----------------------
//ex02.jsp
package com.itbank.controller;

import java.util.HashMap;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class Ex02Controller {

	@GetMapping("/ex02")
	public void ex02() {}
	
	@GetMapping("/ex02Ajax")
	@ResponseBody	// 이 함수는 jsp로 포워딩하지 않습니다. 반환값 자체가 응답입니다
	public int ex02Ajax(@RequestParam HashMap<String, String> param) {
		int n1 = Integer.parseInt(param.get("n1"));
		int n2 = Integer.parseInt(param.get("n2"));
		int answer = n1 + n2;
		return answer;
	}
}
-----------------------------
//ex01
package com.itbank.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
public class Ex01Controller {
	
	@GetMapping("/ex01")
	public void ex01() {}
	
	@GetMapping("/ex01-ajax")
	@ResponseBody		// 이 메서드는 응답의 내용을 직접 반환합니다
	public String ex01Ajax() {
//		return "ex01";	// ex01.jsp 를 찾아가서 실행하고 그 결과를 response로 반환한다
		// 반환하는 문자열 자체가 응답이 되지 않는다
		
		return "Hello, world !!";
	}

}
---------------------------
//header.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<c:set var="cpath">${pageContext.request.contextPath }</c:set>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

<h1><a href="${cpath }">day11</a></h1>
<hr>
---------------------------------
//home.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>
<fieldset>
	<h4>요청을 만들어내는 요소들</h4>
	<ol>
		<li>&lt;a> 태그</li>
		<li>&lt;form> 태그</li>
		<li>javascript:location.href = url</li>
		<li>AJAX (XMLHttpRequest)</li>
	</ol>
</fieldset>

<h3>AJAX 요청을 전달하는 방식에는 XMLHttpRequest, jQuery AJAX, AXIOS, fetch 등이 있다</h3>

<ul>
	<li><a href="${cpath }/ex01">ex01 - ResponseBody</a></li>
	<li><a href="${cpath }/ex02">ex02 - fetch</a></li>
</ul>

</body>
</html>
-------------------------------
//ex01
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>
<h2>ex01 - 기본적인 XMLHttpRequest</h2>

<fieldset>
	<button id="btn">요청</button>
	<span id="result"></span>
</fieldset>

<script>
	function request() {
		const xhr = new XMLHttpRequest()
		
		xhr.onreadystatechange = function(event) {
			if(xhr.status == 200 && xhr.readyState == xhr.DONE) {
				document.getElementById('result').innerText = xhr.responseText
			}	
		}
		xhr.open('GET', '${cpath}/ex01-ajax')	// xhr.open(method, url)
		xhr.send()
	}
	
	const btn = document.getElementById('btn')
	btn.onclick = request
</script>



</body>
</html>
------------------------------
//ex02
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ include file="header.jsp" %>

<div>
	<input type="number" name="n1" min="0" max="100" placeholder="n1">
	+
	<input type="number" name="n2" min="0" max="100" placeholder="n2">
	<input type="button" value="=">
	<span id="result"></span>
</div>

<script>
	const btn = document.querySelector('input[type="button"]')
	
	btn.onclick = function() {	// 사용자가 버튼을 클릭하면
		// 변수 선언
		const n1 = document.querySelector('input[name="n1"]').value		// 값을 불러온다	
		const n2 = document.querySelector('input[name="n2"]').value
		
		const url = '${cpath}/ex02Ajax?n1=' + n1 + '&n2=' + n2
		const opt = {
			method: 'GET'
		}
		
		fetch(url, opt)				// 1) 주소와 옵션으로 요청을 보낸다
		.then(resp => resp.text())	// 2) 응답을 텍스트 형태로 변환한다
		.then(text => {				// 3) 텍스트 형태의 응답을 result 태그 내부에 글자로 적는다
			document.getElementById('result').innerText = text
		})
	}
	
</script>

</body>
</html>
=================================================================
//day12
//servlet-context.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/**   */by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.itbank.controller" />
	
	
	
</beans:beans>
--------------------------
//root-context.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.1.100:1521:xe" />
		<property name="username" value="c##itbank" />
		<property name="password" value="it" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service" />
	<mybatis-spring:scan base-package="com.itbank.member" />
	
		
</beans>

----------------------------


==================================================================
package myServlet;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

//서블릿은 웹의 요청과 응답을 처리 할 수 있는 자바 클래스이다.
//JSP 이전에 서블릿 기술이 먼저 등장했다
//JSP도 실행 될 때는 서블릿의 형태로 바뀌고 나서 실행된다
//서블릿을 만들 때에는 HttpServlet 클래스를 상속받는다. 그렇기 때문에 기능을 하나하나 구현할 필요없다

//상단에 sourcel -> Overrid implement -> 상속받은 것들을 쓴다

//이걸 실행시키면 http://localhost:8080/Day21/ex01 이렇게 뜬다.


//이 서블릿은 web.xml에 등록이 되있고 매핑이 되있어서 프로젝트 전체에서 인식이 된다.
//그렇게 때문에 경로에 문서의 경로를 노출 시키지 않을 수 있다.
//ex01이 파일일 필요가없다. -> 그냥 매핑만 시켜주면된다 -> xml로 구성
//그래서 이 자바소스를 실행시켜도 웹에서도 볼수 있다.

//오버라이딩해보자
public class Servlet01 extends HttpServlet {
	
	//서블릿은 요청을 받아야 실행이된다.
	@Override
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter(); //응답에 글자를 찍어주는 객체 -> out
		//이 부분은 forward로 인해서 안보임
		out.print("<h1>Myservlet01</h1>");
		out.print("<hr>");
		out.print("<h3>Hello, world !!</h3>");
		
		out.print("<marquee direction=\"up\">Hi</marquee>");
		// <text area style=\"resize: none;\"> 이렇게 쓰는게 불편해서 jsp가 등장한것이다
		
		//요청에 대한 처리는 자바코드에서 하고, 응답은 자바에서 위에서처럼 html쓰기 불편하니까 jsp로 넘기자
		//주소를 그대로 두고, 화면만 바꾸려면? -> 포워드
		
		//포워드 하기전에 넘길 객체를 request에 넣어두면 -> jsp에서 객체 띄울수있다.
		//즉, 객체생성같은 처리는 java에서 출력(뷰)는 jsp에서

		request.setAttribute("msg", "지금부터 쉬는 시간입니다");
		
		//이렇게 되면서 ex01.jsp는 단독으로 사용안되면서(WEB-INF에 넣었기때문) 포워드로 접근가능하다
		RequestDispatcher rd = request.getRequestDispatcher("/WEB-INF/views/ex01.jsp");
		rd.forward(request, response);
		//이 코드를 실행시키면 http://localhost:8080/Day21/ex01 로 갔는데
		//ex01.jsp를 보여준다 주소창에는 매핑이된 ex01로 띄어줌
	}
	
}

-----------
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<!-- jsp의 단독실행(msg에 아무것도안뜸)을 막기 위해 web-inf에 넣는다. -->
	<h1>ex01.jsp</h1>
	<h3>이 파일은 서블릿에 의해서 포워딩 이후 보여지는 파일입니다.</h3>
	<h3>msg: ${msg }</h3>
</body>
</html>
=======================================================================
#)스프링 설치
1. java -version으로 1.8버전인지 확인
2. eclipse 2019-06버전으로 통일
3. workspace-spring 폴더 생성
4. eclipse 실행 -> workspace-spring으로 launch 경로지정
5. window -> preferences -> 웹브라우저 -> 크롬 , 
   workspace -> utf-8 , 
   server -> runtimeenvir -> add -> apache 8.5 -> %CATALINA_HOME% 으로 검색 후 추가
   web -> css files,html, jsp -> utf-8, 
6. help -> eclipse market place -> find: sts (spring tools suite의 약어)  -> 젤위에거 -> confirm -> 약관동의 후 설치
7. 밑에 servers에 서버 추가
8. 프로젝트생성 (new -> project -> 스크롤내리면 spring이라는 폴더 -> next -> project이름지정(test, top-level-package와 동일하게 해주자) , 가장아래쪽에있는 spring MVC project클릭 -> next -> top-level package를 com.itbank.test이름으로 설정 ->finish
   -> test 프로젝트 구조를 보면 Spring Elements 가 있는지 확인
9. spring legacy project에는 
1)pom.xml
 - 스프링 프로젝트는 메이븐 기반 프로젝트이다
 - 메이븐은 외부 라이브러리를 관리한다(인터넷에 있는 url만 지정하면 자동으로 .m2에 다운받고 여기있는 파일들을 내 프로젝트에 포함시켜준다) -> pom.xml 기존에는 우리가 lib를 다운받아서 끌어와 썻다
 - pom.xml은 메이븐 프로젝트에 포함시킬 라이브러리를 관리한다.
    pom.xml에서 아래 버전으로 수정
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>4.3.30.RELEASE</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	
	<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
    </plugin>
	
	alt + f5 로 프로젝트 새로고침하면 알아서 버전이 바뀐다
 
2)web.xml
 - 웹 프로그램으로 가져야할 기본 사항을 설정
 - 스프링에 의해서 모든 요청을 처리하는 DispatcherServlet을 선언 -> 프로젝트에 Deployment descriptor: test 더블클릭하면 web.xml이 보인다
 - 인코딩 필터, 서블릿 상세 설정 파일 경로 포함
 
- web-app version: 3.1로 수정하기 (Deployment Descriptor를 더블클릭)
- schemaLoaction: 3_1로 수정

<web-app version="3.1" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_1.xsd">

3)root.context.xml
 - 요청과 응답에 상관없이 프로젝트가 참조해야할 객체를 선언
4)servlet-context.xml
 - 주로 요청과 응답에 관여하는 객체를 선언
 
순서 -> pom.xml이 실행 libraries 밑에 maven에 수많은 jar이 있다. -> web.xml에서는 displatcher servlet이라는 class를 이용해서 name이 appServlet 작동(모든요청에 대해서)
 -> javaresources -> src/main/java -> com.itbank.test 에 HomeController.java작성 -> Spring Elements -> Beans -> Servlet-context.xml 확인
 -> Deployed Resources -> webapp -WEB-INF -views - home.jsp작성 (test프로젝트 우클릭으로 실행)


view와 controller를 분리하는 이유 -> 유지보수 때문에 (front단은 view)

#)home.jsp는 새로 만드는게 좋다. 기존에 있는거 지우고

#)pom.xml에서 
java-version 이라는 변수가 있고 그게 1.8이다
<java-version>1.8</java-version>

#)브라우저에 요청을 날리면 displatcher가 처음 받게 되고 (web.xml설정에의해서) 객체를 찾고 (어노테이션으로찾는닫)
-> http://localhost:8080/test2/ 이렇게 '/' 최상위 요청이 왓으니 @RequestMapping("/")를 실행된다
-> return "home"인데 이거는 포워드로 넘어간다. 그렇게 되면서 home.jsp에는 참조할 수 있게 된다.


---------------------------------
#)메이븐을 만들어보자

#)new project -> Maven project -> create a simple project 체크 -> 
group id : com.itbank
artifact : test3 (프로젝트이름의 역할, 다른 프로젝트와 구분할 수 있는 id역할)
packaging: jar


//Ioc (inversion of Control) : 제어 역전
-> 일반적으로 프로그래밍을 작성할 떄 프로그램이 흘러가는 흐름이나 생성되는 객체에 대한 제어권을 만드는 개발자가 가지는 것과 달리
   프레임 워크가 가지는 것을 의미한다.
-> 개발자가 코드의 흐름이나 객체 생성에 관련된 코드를 프로그래밍 코드에 직접 작성하는 것이 아닌 프레임워크가 사용하는 파일에
   작성하면 이를 토대로 프레임워크가 객체를 생성하여 반환하고 코드가 동작하는 순서를 결정하게 된다는 의미이다.
-> 즉, 처음부터 프로그램 종료될때까지 코드의 흐름을 원래 개발자가 만들었는데 IOC를 적용한 개발방식은 개발자가 몇가지 세팅만 해주면
   세팅된 정보를 토대로 해서 프로그램이 흘러가는 부분은 프레임워크가 해준다.

Ioc는 POJO Class를 핵심적으로 사용한다 POJO Class는 java bean이다.
-> 자바 모델이나, 기능, 프레임워크 등에 따르지 않고 홀로 독립적이며 단순한 기능만을 가진 객체들을 의미

IoC 컨테이너의 종류 : BeanFactory, ApplicationContext

#)BeanFactory
객체 생성 주소값 반환, 상속 등 객체간의 관계를 형성 관리
Bean에 관련된 설정을 위한 xml파일은 즉시 로딩하지만 객체는 개발자가 요구 할 때 생성한다

#)ApplicationContext
객체 생성 주소값 반환, 상속 등 객체간의 관계를 형성 관리
Bean에 관련된 설정을 위한 xml파일은 즉시 로딩하면서 객체를 미리 생성해서 가지고 있다.
ClassPathXmlApplicationContext
FileSystemXmlApplicationContext
XmlWebApplicationContext

------------------
#)수업
- 스프링프레임워크에서는 객체를 미리 등록하여 불러와서 사용한다(부를 때마다 생성하면 메모리 과부하 문제다)
- 객체 용도별로 연관성 있는 객체가 모여있다(참조, 의존성), 중식,양식 관련조리도구가있고 색깔별로 있다(육류 등)
- 스프링에서 사용하기 위해소는 객체를 미리 등록해야한다
여기 등록하는 방법은

1) <bean id="객체이름" class="패키지.클래스" />

2) <bean id="객체이름" class="패키지.클래스">
       <property name="age" value="29" />
       <property name="score">100</property>
   </bean>

3) <bean id="객체이름" class="패키지.클래스">
       <property name="member" ref="m1" />
   </bean>

4) <bean id="객체이름" class="패키지.클래스">
       <constructor-arg value="이지은" />
       <constructor-arg value="29" />
   </bean>


1)번은 클래스 객체이름 = new 클래스(); 와 같다
2)번은 클래스 객체이름 = new 클래스();
	객체이름.setAge(29);
3)번은 클래스 객체이름 = new 클래스();
  객체이름.setMember(m1); //참조변수 값
4)번은 클래스 객체이름 = new 클래스("이지은", 29);

// 지정한 패키지 내에 클래스 중에서 특정 어노테이션이 붙은 클래스를
// 객체로 생성하고 스프링 빈으로 등록해라
// 특정 어노테이션의 종류

@Controller에는 함수를 적을때	Web관련된	: MVC에서 컨트롤러, 서블릿에게 요청을 넘겨받음
@Service (java, 단독으로도 실행가능한 코드, web,db가 하기 애매한거를 service에 넣는다) : 컨트롤러가 호출할 수 있는 함수를 모아서 가지는 객체, Model이나 Controller에 종속적이지 않은 코드를 작성
@Repository(DB, select,update등)		: 데이터의 저장소, 즉 DB에 접근하는 객체, 보통 DAO를 가리킨다
@Component		: 용도는 명확하지 않으나, 스프링 빈으로 등록하여 사용할 객체
@RestController		: 기존 컨트롤러의 기능에서 모든 메서드에 @ResponseBody가 자동으로 적용된다. AJAX용으로 사용
@ControllerAdvice 	: 지정한 범위에서 발생하는 모든 예외를 집중시켜 처리하는 클래스

매개변수 가능한 자료형
HttpServletRequest
HttpSession
String
DTO
Model
ModelAndView

반환형 가능한 자료형
void
String
ModelAndView

=======================================================================
#)요청은 스프링서버에들어와서 디스패처가 감지하고 스프링빈중에서 컨트롤러중에서 어떤객체를 쓸거냐(그중에 메서드) 찾는다.

#)javaresources > src/main/java > com.itbank.controller로 바꾸고 홈페이지 띄우면 주소가 여전히 (servlet-context보면 바껴있다)
localhost:8080/day01이다. 

#)netstat -ano | findstr 8080
#)taskkill /f /pid 8136 

========================================================================
#)root-context수정
#)pom.xml에 넣기
#)spring jdbc(4.3.30 스프링버전이랑 맞춰야된다) , c3p0(커넥션풀을 대신해주는), ojdbc8 메이븐프로젝트 검색

<!-- xml의 서버상 경로에 한글이 포함되어도 예외를 발생시키지 않게 처리해주는 라이브러리 (내 컴퓨터안의 경로가 한글이어도)-->
		<dependency>
		    <groupId>xerces</groupId>
		    <artifactId>xercesImpl</artifactId>
		    <version>2.12.1</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<!-- 스프링에서 DB접속  기능을 지원해주는 라이브러리 -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		        
		        
		<!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->
		<!-- 스프링에서 사용할 수 있는 가장 기초적인 커넥션 풀 -->
		<dependency>
		    <groupId>com.mchange</groupId>
		    <artifactId>c3p0</artifactId>
		    <version>0.9.5.5</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
		<!-- 오라클 데이터베이스에 접근하기 위한 드라이버 라이브러리 -->
		<dependency>
		    <groupId>com.oracle.database.jdbc</groupId>
		    <artifactId>ojdbc8</artifactId>
		    <version>21.3.0.0</version>
		</dependency>
=======================================================================================================
#)간단 정리
1)클래스를 작성할 패키지를 root-context.xml혹은 servlet-context.xml에 base-package로 등록한다.
(스프링 빈을 설정하기 위한 밑작업)
2) 내가 직접 작성하는 클래스가 아니라면, <bean>태그를 이용하여 클래스르르 불러와서 빈으로 등록한다
3)클래스를 작성한다. 이때 클래스는 @Controller, @Service, @Repository 와 같은 어노테이션에 의해 스프링 빈으로 등록된다.
(스프링이 객체를 컨테이너 내부에 싱글톤 형식으로 생성하고, 필요하다면 객체간의 의존성을 스프링이 연결(주입)한다)
4)요청 -> 컨트롤러 @RequestMapping -> @Service의 함수 -> @Repository
반환값이 역순으로 반환되고, 보통 반환값을 model.addAttribute(name,value)
                            mav.addObject(name, value) 형식으로 처리한다
5)컨트롤러의 @RequestMapping 함수는 String 혹은 ModelAndView를 반환하면서 ViewName을 DispatcherServlet에게 전달
6) DispatcherServlet은 prefix + viewName + suffix를 만들어서 포워딩한다
단, viewName.startWith("redirect:")이면 포워드를 수행하지않고, 지정한 주소로 리다이렉트한다
7) 포워드라면,jsp의 내용이 화면이 출력되고, 리다이렉트라면, 다시 @RequestMapping의 함수를 호출한다.

@Service는 순수 자바코드로 처리가능한 곳
@Service
public class xxService {
	public List<xx> getList() {
		return dao.selectList();
	}
}

---------------------------------------------------------------------
#)myBatis란 영속성(Persistent) 프레임워크이다.
-> 프로그램이 종료되어도 데이터가 유실되지 않는다.
-> 데이터베이스에 저장해두면 웹서버를 꺼도 데이터는 살아있다

#)ORM
O: object    객체 (Object Oriented Programming)
R: Relation  관계 (Relation DBMS)
M: Mapping   매핑 (위에것을 자동으로 매핑해준다 dto, row들을 맞춰주기 위해서 우리가 rs.set이렇게했는데, mybatis는 ORM을 지원
하기 때문에 쿼리문만 쓰면된다)

=======================================
#)mybatis xml으로 구현
rootcontext.xml로딩이 끝나면
sqlSessionTemplate을 준비한다 -> mybatis-config.xml, sqlmap-***.xml파일이 불러온다
설정에의해서***Service,***DA0(sqlmap-***.xml)를 불러온다

controller -> service -> dao -> sqlsessiontemplate (statement에 의해) -> sqlmap-**.xml을 참조

sqlmap-1.xml, sqlmap-2.xml 같은 구분하는게 statement이다.

그럼 기존에 dao에서 바로 접근하는게 좋지않나?
간단한 쿼리는 그냥 기존방식 써도된다.
if문을 통해 sql문을 뗏다 붙였다 할 때는 xml을 쓰는게 좋다(쿼리문에 조건문이 가능) -> 동적쿼리

1)mybatis형식을 사용하기 위한 준비한다
root-context.xml에서
 - configLocation: mybatis-config.xml 이 등록되어 있고, 파일이 제자리에 있는지 확인
 - mapperLocations: sqlmap-***.xml 이 등록되어 있고, namespace가 DAO와 연결되어있는지 확인
 
2) 연결이 모두 완료되었다면 Controller -> Service -> DAO -> mapper.xml 로 연결됨
- mapper.xml 을 작성하는 요령
-> namespace는 DAO의 이름을 작성한다
-> <select> <insert> <update> <delete>태그를 사용한다
-> <select> 는 resultType을 명시해야한다.
-> <insert> <update> <delete> 는 resultType이 int로 고정이기 때문에 생략한다
-> 매개변수를 전달한다면 parameterType을 명시한다
-> parameterType은 패키지이름.클래스이름을 모두 작성해야한다


-> 자주 사용하는 클래스 자료형이 있다면, 마이바티스 설정파일에서 typeAliase를 설정하여 줄일 수 있다.
mybatis-config.xml에서
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC
	 "-//mybatis.org/DTD Config 3.0//EN" 
	 "http://mybatis.org/dtd/mybatis-3-config.dtd">
	 
	 <configuration>
	 	<settings>
	 		<setting name="cacheEnabled" value="false"/> <!-- 캐시 사용안한다 -->
	 		<setting name="useGeneratedKeys" value="false"/> <!--  자동으로 만들어지는 키 사용안한다 -->
	 		<setting name="mapUnderscoreToCamelCase" value="false"/>
	 		<!-- 
	 			user_name => (언더바를 대문자로)userName으로 mybatis가 바꾸도록 하겠느냐? 아니다(db랑 맞추기 위해서) 
	 		 -->
	 	</settings>
	 	<typeAliases>
	 		<typeAlias type="com.itbank.member.MemberDTO" alias="member"/>
	 	</typeAliases>
	 </configuration>
========================================================================
pom.xml 에서 artifactId를 바꾸면 context-path도 자동으로 바뀐다. 그러면 /day05 가 프로젝트 최상위이다


//sqlSessionFactory라는게 @Select할 때 부르는건데 그때 sqlmap파일이 없으면 가용할 수없다고 에러가 난다.
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:config/mybatis-config.xml"/>
		<property name="mapperLocations">
			<list>
				<value>classpath:config/sqlmap-member.xml</value> 두 파일이 만들어져있어야한다
				<value>classpath:config/sqlmap-test.xml</value>
				<value>classpath:config/sqlmap-login.xml</value>
			</list>
		</property> -->
	</bean> 

즉, root-context에 없는 파일이 있으면 안된다

=======================================================================================
day08) css 파일분리시 resources 밑에 폴더만들어서 넣고, servlet-context에 
servlet 수정 (로그인)
=======================================================================================
#)java.util.Date를 java.sql.Date로 바꾸는 방법
public class MainClass { 
  public static void main(String[] args) {
    java.util.Date utilDate = new java.util.Date();
    java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
    System.out.println("utilDate:" + utilDate);
    System.out.println("sqlDate:" + sqlDate);
  }
}
=============================================================================
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.Date, java.text.SimpleDateFormat" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
<%
	Date date = new Date();
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 hh시 mm분 ss초");
	String today = sdf.format(date);
%>
<h1>지금은 <%=today %>입니다</h1>
==================================================================================
package day04_book;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

// - 도서 이름, 저자, 출판일자, 출판사, 가격, 소개

public class BookDTO {
	private String name, author, publisher, comment;
	private Date publishDate;
	private int price;
	
	// 더미 데이터 생성 및 등록 시 사용할 객체 생성자
	public BookDTO(String name, String author, String publisher, String comment, String publishDate, int price) {
		this.name = name;
		this.author = author;
		this.publisher = publisher;
		this.comment = comment;
		
		Date date = null;
		try {
			date = new SimpleDateFormat("yyyy-MM-dd").parse(publishDate); //sql로 변경(parse)
		} catch (ParseException e) {}
		
		this.publishDate = date;
		this.price = price;
	}
	
	// 기본 생성자
	public BookDTO() {}
==========================================================================================
day09 -> 회원정보수정, interceptor추가


============================================================================================
요청을 만들어내는 종류
1)<a>
2)location.href
3)<form><input type="submit">
  <form><button>이것도제출</button></form>
  <form><input type="button" values="이거는 제출아님"></form>
4)XMLHttpRequest (javascript, XHR)
  AJAX(Asynchronous Javascript, And XML => xml을 이용한 요청 및 응답방식, 요즘은 xml대신 json형식을 더많이 사용한다)
  (페이지 변경없이 실시간으로 db에서 데이터를 받아온다)


#)문자열은 equals로 비교
String word1 ="apple";
String word2 ="apple";   -> word1 == word2 는 true이다. 같은 주소를 쓰고있다(재사용, 이미apple이라는 상수가 있으니 새로만들지 말라).
String word4 = sc.nextLine();  -> apple이라고 입력해도 word1,word2와 word4는 다르다. 공간을 미리 만들고 apple저장하니까
String word3 = new String("apple"); ->이것도 마찬가지다. 다르다.(새로운 공간을 만든다) 

//root-context(controller끼리 bean들을 참조할때)를 먼저 읽고 servlet-context를 읽는다.


===========================================================================
#)servlet
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/별별 by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/upload/**" location="file:C:/upload/"/>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="multipartResolver"
		 class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		 <!-- 최대 업로드 용량 -->
		<beans:property name="maxUploadSize" value="10485760"/>
		
		<!-- 메모리 상에 존재할 수 있는 최대 크기 -->
		<beans:property name="maxInMemorySize" value="10485760"/>
		<!-- 파일이름(혹은 텍스트라면 내용)에 대한 인코딩 -->
		<beans:property name="defaultEncoding" value="utf-8"/>
		
	</beans:bean>
	
	<interceptors> 
		<interceptor>
			
			<mapping path="/**"/>
				<exclude-mapping path="/"/>
				<exclude-mapping path="/login"/>
				<exclude-mapping path="/resources/**"/>
				<exclude-mapping path="/upload/**"/><!-- home에 접근하면 사진뜰수있게 -->
			
			<beans:bean id="loginIntercepter" class="com.itbank.intercepter.LoginIntercepter"/>
			
		</interceptor>
	</interceptors>
	
	<context:component-scan base-package="com.itbank.controller" />
	
	
	
</beans:beans>

-----------------
#)rootcontext
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@221.164.9.200:50000:xe"/>
		<property name="username" value="c##mango"/>
		<property name="password" value="it"/>
	</bean>
	
	<!-- 기존은 c3p를 썼었다 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>	
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis-config는 들고오자 먼저 -->
		<property name="configLocation" value="classpath:config/mybatis-config.xml"/>
		<property name="mapperLocations">
			<list>
				<value>classpath:config/sqlmap-member.xml</value>
				<value>classpath:config/sqlmap-image.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<context:component-scan base-package="com.itbank.service"/>
	<context:component-scan base-package="com.itbank.model"/>
	
	<!-- mybatis-spring은 인터페이스를 스캔 -->
	<mybatis-spring:scan base-package="com.itbank.model"/>
</beans>
==============================================================================
//노트북 -> 전원옵션 -> 절전모드로 변환 -> 해당없음으로해야한다. 좀비프로세스가 될수도있다


front     backend      Database 
get                    select
post                   insert
put                    update(덮어씌운다)  -> pk필요
delete                 delete
patch                  update
options   cors


==================================================================================
@Select("select * from membertest where username like '%'||#{username}||'%' order by username")

http는 요청을 보내면 응답을하고 접속을 끊어버리는 형태이다. 그래서 session이 만들어진것이다.(http는 연결지향형이 아니라서)
-> 웹소켓이 해결(통신터널을 열어놓는다)

===================================================================================
pom, web.xml, root,servletcontext, taglib, cpath

========================================================================================
// @Requestbody 와 @RequestParam 차이

컨트롤러에서 데이터를 인자에 할당하는 대표적인 방법으로는 @RequestBody 와 @RequestParam 이 있다.

form
<input type="text" name="name"~~>
<input type="number" name="age"~~>
form이용해서
이름 :    (name)
나이 : 	 (age)
입력받을때

//RequestParm사용시
@Controller
public class UserController {

	@PostMapping("/receive")
	public String age(@RequestParam String name) {
		System.out.println("통신 성공");
		System.out.println(">>> " + name);
		return "index";
	}
}
//출력 결과
//통신 성공
//>>> jun
@RequestBody 로 데이터를 받을 때는 메서드의 변수명이 상관이 없었지만, @RequestParam 으로 데이터를 받을때는 데이터를 저장하는 이름으로 메서드의 변수명을 설정해주어야 한다.
결과적으로 jun 이라는 이름이 잘 전달이 되었고, 이번엔 name 이라는 변수에 할당이 되어 사용하기에도 용이하다.

-------------------------------
//RequestBody사용시
@Controller
public class UserController {

	@PostMapping("/receive")
	public String age(@RequestBody String name) {
		System.out.println("통신 성공");
		System.out.println(">>> " + name);
		return "index";
	}
}
//출력 결과
//통신 성공
//>>> name=jun&age=13
우리가 입력한 'jun' 이라는 이름과 '13' 이라는 나이가 잘 전달이 되었지만 단지 'name=jun&age=13' 이라는 String 으로 전달되어 전달된 데이터를 사용하기에는 불편함이 있다.
---------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<button id="postData">
    데이터 전송
</button>
<script>
    const $postDataButton = document.querySelector("#postData")

    const postData = event => {
        console.log("데이터 전송");

        fetch("/receive", {
            method: 'post',
            headers: {
                'content-type': 'application/json'
            },
            body : JSON.stringify({
                name : "jun",
                age : "13"
            })
        })
    }

    $postDataButton.addEventListener("click", postData);
</script>
</body>
</html>

'데이터 전송' 버튼을 누르면 
'/receive' 주소로,
post 방식으로,
{name : "jun",
age : "13}
이라는 데이터가 Json의 형태로 전송이 된다.
이 데이터를 @RequestParam 을 이용하여 받아보자.

@Controller
public class UserController {

	@PostMapping("/receive")
	public String age(@RequestParam String name) {
		System.out.println("통신 성공");
		System.out.println(">>> " + name);
		return "result";
	}
}
위와 같이 컨트롤러를 구현한 후 데이터를 전송해보았지만 에러가 발생하였다.

 

MissingServletRequestParameterException: Required String parameter 'name' is not present

 

name 이라는 파라미터가 없다고 한다.

그 이유는 기본적으로 @RequestParam 은 url 상에서 데이터를 찾기 때문이다.

우리가 위에서 <form> 태그를 이용하여 데이터를 입력하고 제출 버튼을 누르면 입력한 데이터들이 url을 통해서 전달된다.

 

예를 들면 'http://localhost:8080/receive?name=jun&age=13' 이런 식이다.

반면에 Json형식으로 데이터를 전달할때는, url은 http://localhost:8080/receive로 변함이 없고 body에 데이터를 포함하여 전송하기 때문에 @RequestParam 으로는 받을 수 없는 것이다.

--------------------------
이제 다시 본론으로 돌아와 '/receive' 주소로 데이터를 전송하고 @RequestBody 로 데이터를 받아보자.
@Controller
public class UserController {

	@PostMapping("/receive")
	public String age(@RequestBody String req) {
		System.out.println("통신 성공");
		System.out.println(">>> " + req);
		return "result";
	}
}

//출력 결과
//통신 성공
//>>> {"name":"jun","age":"13"}

<form> 태그로 데이터를 전달하고 @RequestBody 로 받았을 때와 차이가 없어 보인다.
하지만 여기에는 큰 차이가 있다.

----------------------
바로 자동 객체 생성이다
만약 다음과 같이 name 과 age 를 필요로 하는 Person 클래스가 있고 getter 가 구현되어 있다면

public class Person {
    private String name;
    private int age;

    public Person() {

    }

    public Person(final String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}

다음과 같은 기능이 가능하다.

@Controller
public class UserController {

	@PostMapping("/receive")
	public String age(@RequestBody Person person) {
		System.out.println("통신 성공");
		System.out.println(">>> " + person);
		return "result";
	}
}

//출력 결과
//통신 성공
//>>> Person{name='jun', age=13}

신기하게도 Person 객체를 자동으로 생성해 주었다.

@RequestBody 가 아닌 @RequestParam 을 이용한다면 불가능하다. 한번 시도해보자.
 

비동기통신에서 @RequestParam 으로 데이터를 전달받기 위해 fetch에서 /receive?name=jun&age=13 의 주소로 데이터를 전송하고 @RequestParam 으로 데이터를 받아 같은 행동을 취했지만 에러가 발생하는 모습이다.

@Controller
public class UserController {

	@PostMapping("/receive")
	public String age(@RequestParam Person person) {
		System.out.println("통신 성공");
		System.out.println(">>> " + person);
		return "result";
	}
}

//출력 결과
.MissingServletRequestParameterException: Required Person parameter 'person' is not present]

---------------------
@RequestBody, @RequestParam 모두 Map<String,String> 으로 결과를 받아올 수도 있다.

@Controller
public class UserController {

	@PostMapping("/receive")
	public String age(@RequestBody Map<String,String> map) {
		System.out.println("통신 성공");
		System.out.println(">>> " + map.get("name"));
		System.out.println(">>> " + map.get("age"));
		return "result";
	}
}

//출력 결과
//통신 성공
//>>> jun
//>>> 13
=========================================================================
HttpServletRequest
웹브라우저 사용자인 클라이언트로부터 서버로 요청이 들어오면 서버에서는 HttpServletRequest  를 생성하며, 
요청정보에 있는 패스로 매핑된 서블릿에게 전달합니다.

- 예를들어, 아이디, 비밀번호 등의 데이터를 컨트롤러로 보냈을 때, HttpServletRequest 객체안의 모든 데이터들이 들어가게된다.
- @RequestParam도 가능
- 원하는 데이터를 꺼낼때는 String id = httpServletRequest.getParameter("id");
- getParameter()메소드는 반환타입이 String이다.
- model객체를 이용해서 뷰로넘긴다.

@Controller
public class HomeController {
	@RequestMapping("/board/confirmId")
	public String confirmId(HttpServletRequest httpServletRequest, Model model) {
		String id = httpServletRequest.getParameter("id");
		String pwd = httpServletRequest.getParameter("pwd");
		model.addAttribute("id",id);
		model.addAttribute("pwd",pwd);
		return  "board/confirmId";
	}
}

또 다른 예)
<a href="/board/list.do?gubun=1">  //파라미터 전달
-------
@RequestMapping("/board/list.do")
public String list(HttpServletRequest request, Model model){
 
        
 
       String gubunValue = request.getParameter("gubun");
    
    
       model.addAttribute("gubunValue ", gubunValue );
 
        
 
       return "/board/list";
 
    }
=======================================================================
HTTP header - referer
리퍼러를 참조함으로써 현재 표시하는 웹페이지가 어떤 웹페이지에서 요청되었는지 알 수 있으며, 어떤 웹사이트나 웹서버에서 방문자가 왔는지를
파악할 수 있는 기능

[http://www.info19.com/1.html] 이라는 웹페이지에 있는 링크를 클릭하여 [http://www.info19.com/2.html] 으로 이동했을 때 
리퍼러는 [http://www.info19.com/1.html] 이 된다.

=======================================================================
//쿠키란
웹서버가 웹브라우저에게 보내는 데이터 중의 하나입니다.
    웹브라우저는 웹서버로부터 받은 쿠키 데이터를 내부 메모리 또는 
    별도의 폴더에 저장합니다. 그리고 그 웹서버를 방문할 때마다 쿠키를 
    요청 헤더(Request Header)에 담아 다시 전달합니다.

=========================================================================

